# 1 "event.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "event.c"
# 27 "event.c"
# 1 "/root/dm_event/event_lib/include/event2/event-config.h" 1
# 28 "event.c" 2
# 1 "evconfig-private.h" 1
# 29 "event.c" 2







# 1 "/usr/include/sys/types.h" 1 3 4
# 25 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 428 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 450 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 451 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 452 "/usr/include/sys/cdefs.h" 2 3 4
# 429 "/usr/include/features.h" 2 3 4
# 452 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 453 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/sys/types.h" 2 3 4



# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4



# 30 "/usr/include/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 140 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 141 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 30 "/usr/include/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4
# 177 "/usr/include/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 193 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 33 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 194 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4
# 9 "/usr/include/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/sys/select.h" 2 3 4
# 49 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4

# 101 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/sys/select.h" 3 4

# 197 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 236 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;
# 148 "/usr/include/bits/thread-shared-types.h" 3 4
  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 165 "/usr/include/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 245 "/usr/include/sys/types.h" 2 3 4



# 37 "event.c" 2

# 1 "/usr/include/sys/time.h" 1 3 4
# 34 "/usr/include/sys/time.h" 3 4

# 52 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 68 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };




typedef enum __itimer_which __itimer_which_t;






extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 186 "/usr/include/sys/time.h" 3 4

# 39 "event.c" 2

# 1 "/usr/include/sys/queue.h" 1 3 4
# 41 "event.c" 2

# 1 "/usr/include/sys/socket.h" 1 3 4
# 24 "/usr/include/sys/socket.h" 3 4


# 1 "/usr/include/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 24 "/usr/include/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 27 "/usr/include/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 29 "/usr/include/sys/socket.h" 2 3 4




# 1 "/usr/include/bits/socket.h" 1 3 4
# 27 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 28 "/usr/include/bits/socket.h" 2 3 4





typedef __socklen_t socklen_t;




# 1 "/usr/include/bits/socket_type.h" 1 3 4
# 24 "/usr/include/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/bits/socket.h" 2 3 4
# 175 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 176 "/usr/include/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 191 "/usr/include/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_ZEROCOPY = 0x4000000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 305 "/usr/include/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__ , __leaf__));
# 332 "/usr/include/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 393 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4




# 1 "/usr/include/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/asm/sockios.h" 2 3 4
# 6 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/asm/socket.h" 2 3 4
# 394 "/usr/include/bits/socket.h" 2 3 4
# 447 "/usr/include/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 34 "/usr/include/sys/socket.h" 2 3 4


# 1 "/usr/include/bits/types/struct_osockaddr.h" 1 3 4





struct osockaddr
{
  unsigned short int sa_family;
  unsigned char sa_data[14];
};
# 37 "/usr/include/sys/socket.h" 2 3 4




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 79 "/usr/include/sys/socket.h" 3 4
typedef union { struct sockaddr *__restrict __sockaddr__; struct sockaddr_at *__restrict __sockaddr_at__; struct sockaddr_ax25 *__restrict __sockaddr_ax25__; struct sockaddr_dl *__restrict __sockaddr_dl__; struct sockaddr_eon *__restrict __sockaddr_eon__; struct sockaddr_in *__restrict __sockaddr_in__; struct sockaddr_in6 *__restrict __sockaddr_in6__; struct sockaddr_inarp *__restrict __sockaddr_inarp__; struct sockaddr_ipx *__restrict __sockaddr_ipx__; struct sockaddr_iso *__restrict __sockaddr_iso__; struct sockaddr_ns *__restrict __sockaddr_ns__; struct sockaddr_un *__restrict __sockaddr_un__; struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __SOCKADDR_ARG __attribute__ ((__transparent_union__));


typedef union { const struct sockaddr *__restrict __sockaddr__; const struct sockaddr_at *__restrict __sockaddr_at__; const struct sockaddr_ax25 *__restrict __sockaddr_ax25__; const struct sockaddr_dl *__restrict __sockaddr_dl__; const struct sockaddr_eon *__restrict __sockaddr_eon__; const struct sockaddr_in *__restrict __sockaddr_in__; const struct sockaddr_in6 *__restrict __sockaddr_in6__; const struct sockaddr_inarp *__restrict __sockaddr_inarp__; const struct sockaddr_ipx *__restrict __sockaddr_ipx__; const struct sockaddr_iso *__restrict __sockaddr_iso__; const struct sockaddr_ns *__restrict __sockaddr_ns__; const struct sockaddr_un *__restrict __sockaddr_un__; const struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __CONST_SOCKADDR_ARG __attribute__ ((__transparent_union__));





struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__ , __leaf__));


extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));


extern int getsockname (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));
# 126 "/usr/include/sys/socket.h" 3 4
extern int connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);



extern int getpeername (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, __CONST_SOCKADDR_ARG __addr,
         socklen_t __addr_len);
# 163 "/usr/include/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, __SOCKADDR_ARG __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);







extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);







extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);







extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);






extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__ , __leaf__));




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__ , __leaf__));





extern int listen (int __fd, int __n) __attribute__ ((__nothrow__ , __leaf__));
# 232 "/usr/include/sys/socket.h" 3 4
extern int accept (int __fd, __SOCKADDR_ARG __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, __SOCKADDR_ARG __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 250 "/usr/include/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__ , __leaf__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__ , __leaf__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__ , __leaf__));
# 272 "/usr/include/sys/socket.h" 3 4

# 43 "event.c" 2

# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) __attribute__ ((__nothrow__ , __leaf__));







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 434 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 491 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 516 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 527 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 543 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 593 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 609 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 668 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 679 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 713 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 737 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 756 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);





# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 788 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 806 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 864 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 879 "/usr/include/stdio.h" 3 4

# 45 "event.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 272 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 273 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));







extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1010 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1011 "/usr/include/stdlib.h" 2 3 4
# 1020 "/usr/include/stdlib.h" 3 4

# 46 "event.c" 2

# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 22 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 24 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) ;






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/bits/getopt_posix.h" 3 4
# 1 "/usr/include/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/bits/getopt_posix.h" 3 4

# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;








# 48 "event.c" 2

# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));




extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));




extern int isctype (int __c, int __mask) __attribute__ ((__nothrow__ , __leaf__));






extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 327 "/usr/include/ctype.h" 3 4

# 50 "event.c" 2
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/bits/errno.h" 1 3 4
# 26 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4








extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4




# 51 "event.c" 2
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4



# 1 "/usr/include/bits/signum.h" 1 3 4
# 26 "/usr/include/bits/signum.h" 3 4
# 1 "/usr/include/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 63 "/usr/include/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/bits/siginfo-consts-arch.h" 1 3 4
# 189 "/usr/include/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 27 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 24 "/usr/include/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 37 "/usr/include/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));






extern int sighold (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigrelse (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern int sigignore (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) __attribute__ ((__nothrow__ , __leaf__));
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));





# 52 "event.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 90 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 103 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 114 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 225 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 252 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 265 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 302 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 329 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 359 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 486 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 498 "/usr/include/string.h" 3 4

# 53 "event.c" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 73 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 26 "/usr/include/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));


# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 54 "event.c" 2
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-redhat-linux/8/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-redhat-linux/8/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 38 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 2 3 4
# 162 "/usr/include/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-redhat-linux/8/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-redhat-linux/8/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-redhat-linux/8/include/limits.h" 2 3 4
# 55 "event.c" 2

# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4







# 1 "/usr/include/bits/fcntl.h" 1 3 4
# 35 "/usr/include/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/bits/fcntl-linux.h" 1 3 4
# 265 "/usr/include/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 346 "/usr/include/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 347 "/usr/include/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};










extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    __attribute__ ((__nothrow__ , __leaf__));






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 417 "/usr/include/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) __attribute__ ((__nothrow__ , __leaf__));





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);




# 61 "/usr/include/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/bits/stat.h" 1 3 4
# 46 "/usr/include/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 175 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 184 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 195 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 205 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 219 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 230 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 241 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 251 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 287 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 299 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 309 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 320 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 331 "/usr/include/fcntl.h" 3 4

# 57 "event.c" 2


# 1 "/root/dm_event/event_lib/include/event2/event.h" 1
# 185 "/root/dm_event/event_lib/include/event2/event.h"
# 1 "/root/dm_event/event_lib/include/event2/visibility.h" 1
# 186 "/root/dm_event/event_lib/include/event2/event.h" 2
# 202 "/root/dm_event/event_lib/include/event2/event.h"
# 1 "/root/dm_event/event_lib/include/event2/util.h" 1
# 46 "/root/dm_event/event_lib/include/event2/util.h"
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stdint.h" 2 3 4
# 47 "/root/dm_event/event_lib/include/event2/util.h" 2







# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 426 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 3 4
} max_align_t;
# 55 "/root/dm_event/event_lib/include/event2/util.h" 2




# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stdarg.h" 1 3 4
# 60 "/root/dm_event/event_lib/include/event2/util.h" 2

# 1 "/usr/include/netdb.h" 1 3 4
# 27 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/netinet/in.h" 1 3 4
# 27 "/usr/include/netinet/in.h" 3 4



typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/bits/in.h" 1 3 4
# 142 "/usr/include/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 211 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];
 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];
      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 237 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };



struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 374 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 386 "/usr/include/netinet/in.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 387 "/usr/include/netinet/in.h" 2 3 4
# 502 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) __attribute__ ((__nothrow__ , __leaf__));


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     __attribute__ ((__nothrow__ , __leaf__));
# 532 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));



extern socklen_t inet6_rth_space (int __type, int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_reverse (const void *__in, void *__out) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_segments (const void *__bp) __attribute__ ((__nothrow__ , __leaf__));
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     __attribute__ ((__nothrow__ , __leaf__));





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));



# 28 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4



struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) __attribute__ ((__nothrow__ , __leaf__));
extern void endrpcent (void) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbyname (const char *__name) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcbynumber (int __number) __attribute__ ((__nothrow__ , __leaf__));
extern struct rpcent *getrpcent (void) __attribute__ ((__nothrow__ , __leaf__));


extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) __attribute__ ((__nothrow__ , __leaf__));



# 33 "/usr/include/netdb.h" 2 3 4







# 1 "/usr/include/bits/netdb.h" 1 3 4
# 26 "/usr/include/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 41 "/usr/include/netdb.h" 2 3 4
# 51 "/usr/include/netdb.h" 3 4








extern int *__h_errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 90 "/usr/include/netdb.h" 3 4
extern void herror (const char *__str) __attribute__ ((__nothrow__ , __leaf__));


extern const char *hstrerror (int __err_num) __attribute__ ((__nothrow__ , __leaf__));




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (const char *__name);
# 153 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (const char *__name, int __af);
# 165 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 196 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (const char *__name);
# 235 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (const char *__name, const char *__proto);






extern struct servent *getservbyport (int __port, const char *__proto);
# 306 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (const char *__restrict __name,
       const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 372 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 393 "/usr/include/netdb.h" 3 4
extern int setnetgrent (const char *__netgroup);







extern void endnetgrent (void);
# 410 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 421 "/usr/include/netdb.h" 3 4
extern int innetgr (const char *__netgroup, const char *__host,
      const char *__user, const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 449 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   const char *__restrict __locuser,
   const char *__restrict __remuser,
   const char *__restrict __cmd, int *__restrict __fd2p);
# 461 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      const char *__restrict __locuser,
      const char *__restrict __remuser,
      const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 477 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    const char *__restrict __name,
    const char *__restrict __pass,
    const char *__restrict __cmd, int *__restrict __fd2p);
# 489 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       const char *__restrict __name,
       const char *__restrict __pass,
       const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 503 "/usr/include/netdb.h" 3 4
extern int ruserok (const char *__rhost, int __suser,
      const char *__remuser, const char *__locuser);
# 513 "/usr/include/netdb.h" 3 4
extern int ruserok_af (const char *__rhost, int __suser,
         const char *__remuser, const char *__locuser,
         sa_family_t __af);
# 526 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       const char *__remuser, const char *__locuser);
# 537 "/usr/include/netdb.h" 3 4
extern int iruserok_af (const void *__raddr, int __suser,
   const char *__remuser, const char *__locuser,
   sa_family_t __af);
# 549 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 558 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 660 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (const char *__restrict __name,
   const char *__restrict __service,
   const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) __attribute__ ((__nothrow__ , __leaf__));


extern const char *gai_strerror (int __ecode) __attribute__ ((__nothrow__ , __leaf__));





extern int getnameinfo (const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 690 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[__restrict],
     int __ent, struct sigevent *__restrict __sig);
# 701 "/usr/include/netdb.h" 3 4
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
   const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) __attribute__ ((__nothrow__ , __leaf__));


extern int gai_cancel (struct gaicb *__gaicbp) __attribute__ ((__nothrow__ , __leaf__));



# 62 "/root/dm_event/event_lib/include/event2/util.h" 2
# 325 "/root/dm_event/event_lib/include/event2/util.h"

# 325 "/root/dm_event/event_lib/include/event2/util.h"
struct evutil_monotonic_timer



;
# 340 "/root/dm_event/event_lib/include/event2/util.h"
 int
evutil_date_rfc1123(char *date, const size_t datelen, const struct tm *tm);







struct evutil_monotonic_timer * evutil_monotonic_timer_new(void);





void evutil_monotonic_timer_free(struct evutil_monotonic_timer *timer);





int evutil_configure_monotonic_time(struct evutil_monotonic_timer *timer,
                                    int flags);
# 374 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_gettime_monotonic(struct evutil_monotonic_timer *timer,
                             struct timeval *tp);
# 389 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_socketpair(int d, int type, int protocol, int sv[2]);






int evutil_make_socket_nonblocking(int sock);
# 410 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_make_listen_socket_reuseable(int sock);
# 423 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_make_listen_socket_reuseable_port(int sock);
# 435 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_make_listen_socket_ipv6only(int sock);








int evutil_make_socket_closeonexec(int sock);
# 454 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_closesocket(int sock);
# 469 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_make_tcp_listen_socket_deferred(int sock);
# 581 "/root/dm_event/event_lib/include/event2/util.h"

int64_t evutil_strtoll(const char *s, char **endptr, int base);
# 596 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_snprintf(char *buf, size_t buflen, const char *format, ...)

 __attribute__((format(printf, 3, 4)))

;




int evutil_vsnprintf(char *buf, size_t buflen, const char *format, va_list ap)

 __attribute__((format(printf, 3, 0)))

;



const char *evutil_inet_ntop(int af, const void *src, char *dst, size_t len);


int evutil_inet_pton(int af, const char *src, void *dst);
struct sockaddr;
# 640 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_parse_sockaddr_port(const char *str, struct sockaddr *out, int *outlen);







int evutil_sockaddr_cmp(const struct sockaddr *sa1, const struct sockaddr *sa2,
    int include_port);





int evutil_ascii_strcasecmp(const char *str1, const char *str2);




int evutil_ascii_strncasecmp(const char *str1, const char *str2, size_t n);
# 789 "/root/dm_event/event_lib/include/event2/util.h"
struct addrinfo;
# 801 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_getaddrinfo(const char *nodename, const char *servname,
    const struct addrinfo *hints_in, struct addrinfo **res);



void evutil_freeaddrinfo(struct addrinfo *ai);


const char *evutil_gai_strerror(int err);
# 821 "/root/dm_event/event_lib/include/event2/util.h"

void evutil_secure_rng_get_bytes(void *buf, size_t n);
# 840 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_secure_rng_init(void);
# 856 "/root/dm_event/event_lib/include/event2/util.h"

int evutil_secure_rng_set_urandom_device_file(char *fname);
# 874 "/root/dm_event/event_lib/include/event2/util.h"

void evutil_secure_rng_add_bytes(const char *dat, size_t datlen);
# 203 "/root/dm_event/event_lib/include/event2/event.h" 2
# 217 "/root/dm_event/event_lib/include/event2/event.h"
struct event_base



;
# 276 "/root/dm_event/event_lib/include/event2/event.h"
struct event



;
# 295 "/root/dm_event/event_lib/include/event2/event.h"
struct event_config



;
# 321 "/root/dm_event/event_lib/include/event2/event.h"

void event_enable_debug_mode(void);
# 333 "/root/dm_event/event_lib/include/event2/event.h"

void event_debug_unassign(struct event *);
# 343 "/root/dm_event/event_lib/include/event2/event.h"

struct event_base *event_base_new(void);
# 356 "/root/dm_event/event_lib/include/event2/event.h"

int event_reinit(struct event_base *base);
# 372 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_dispatch(struct event_base *);








const char *event_base_get_method(const struct event_base *);
# 396 "/root/dm_event/event_lib/include/event2/event.h"

const char **event_get_supported_methods(void);





int event_gettime_monotonic(struct event_base *base, struct timeval *tp);
# 440 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_get_num_events(struct event_base *, unsigned int);
# 453 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_get_max_events(struct event_base *, unsigned int, int);
# 466 "/root/dm_event/event_lib/include/event2/event.h"

struct event_config *event_config_new(void);







void event_config_free(struct event_config *cfg);
# 489 "/root/dm_event/event_lib/include/event2/event.h"

int event_config_avoid_method(struct event_config *cfg, const char *method);
# 501 "/root/dm_event/event_lib/include/event2/event.h"
enum event_method_feature {

    EV_FEATURE_ET = 0x01,




    EV_FEATURE_O1 = 0x02,


    EV_FEATURE_FDS = 0x04,






    EV_FEATURE_EARLY_CLOSE = 0x08
};
# 529 "/root/dm_event/event_lib/include/event2/event.h"
enum event_base_config_flag {






 EVENT_BASE_FLAG_NOLOCK = 0x01,


 EVENT_BASE_FLAG_IGNORE_ENV = 0x02,






 EVENT_BASE_FLAG_STARTUP_IOCP = 0x04,



 EVENT_BASE_FLAG_NO_CACHE_TIME = 0x08,
# 566 "/root/dm_event/event_lib/include/event2/event.h"
 EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST = 0x10,






 EVENT_BASE_FLAG_PRECISE_TIMER = 0x20
};
# 583 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_get_features(const struct event_base *base);
# 608 "/root/dm_event/event_lib/include/event2/event.h"

int event_config_require_features(struct event_config *cfg, int feature);








int event_config_set_flag(struct event_config *cfg, int flag);
# 629 "/root/dm_event/event_lib/include/event2/event.h"

int event_config_set_num_cpus_hint(struct event_config *cfg, int cpus);
# 660 "/root/dm_event/event_lib/include/event2/event.h"

int event_config_set_max_dispatch_interval(struct event_config *cfg,
    const struct timeval *max_interval, int max_callbacks,
    int min_priority);
# 677 "/root/dm_event/event_lib/include/event2/event.h"

struct event_base *event_base_new_with_config(const struct event_config *);
# 691 "/root/dm_event/event_lib/include/event2/event.h"

void event_base_free(struct event_base *);





void event_base_free_nofinalize(struct event_base *);
# 721 "/root/dm_event/event_lib/include/event2/event.h"
typedef void (*event_log_cb)(int severity, const char *msg);
# 732 "/root/dm_event/event_lib/include/event2/event.h"

void event_set_log_callback(event_log_cb cb);






typedef void (*event_fatal_cb)(int err);
# 754 "/root/dm_event/event_lib/include/event2/event.h"

void event_set_fatal_callback(event_fatal_cb cb);
# 774 "/root/dm_event/event_lib/include/event2/event.h"

void event_enable_debug_logging(uint32_t which);
# 786 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_set(struct event_base *, struct event *);
# 825 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_loop(struct event_base *, int);
# 843 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_loopexit(struct event_base *, const struct timeval *);
# 859 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_loopbreak(struct event_base *);
# 879 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_loopcontinue(struct event_base *);
# 894 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_got_exit(struct event_base *);
# 909 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_got_break(struct event_base *);
# 1014 "/root/dm_event/event_lib/include/event2/event.h"
typedef void (*event_callback_fn)(int, short, void *);
# 1038 "/root/dm_event/event_lib/include/event2/event.h"

void *event_self_cbarg(void);
# 1089 "/root/dm_event/event_lib/include/event2/event.h"

struct event *event_new(struct event_base *, int, short, event_callback_fn, void *);
# 1131 "/root/dm_event/event_lib/include/event2/event.h"

int event_assign(struct event *, struct event_base *, int, short, event_callback_fn, void *);








void event_free(struct event *);




typedef void (*event_finalize_callback_fn)(struct event *, void *);
# 1178 "/root/dm_event/event_lib/include/event2/event.h"

int event_finalize(unsigned, struct event *, event_finalize_callback_fn);

int event_free_finalize(unsigned, struct event *, event_finalize_callback_fn);
# 1208 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_once(struct event_base *, int, short, event_callback_fn, void *, const struct timeval *);
# 1232 "/root/dm_event/event_lib/include/event2/event.h"

int event_add(struct event *ev, const struct timeval *timeout);
# 1244 "/root/dm_event/event_lib/include/event2/event.h"

int event_remove_timer(struct event *ev);
# 1258 "/root/dm_event/event_lib/include/event2/event.h"

int event_del(struct event *);







int event_del_noblock(struct event *ev);






int event_del_block(struct event *ev);
# 1291 "/root/dm_event/event_lib/include/event2/event.h"

void event_active(struct event *ev, int res, short ncalls);
# 1307 "/root/dm_event/event_lib/include/event2/event.h"

int event_pending(const struct event *ev, short events, struct timeval *tv);








struct event *event_base_get_running_event(struct event_base *base);
# 1334 "/root/dm_event/event_lib/include/event2/event.h"

int event_initialized(const struct event *ev);
# 1346 "/root/dm_event/event_lib/include/event2/event.h"

int event_get_fd(const struct event *ev);





struct event_base *event_get_base(const struct event *ev);





short event_get_events(const struct event *ev);





event_callback_fn event_get_callback(const struct event *ev);





void *event_get_callback_arg(const struct event *ev);






int event_get_priority(const struct event *ev);
# 1387 "/root/dm_event/event_lib/include/event2/event.h"

void event_get_assignment(const struct event *event,
    struct event_base **base_out, int *fd_out, short *events_out,
    event_callback_fn *callback_out, void **arg_out);
# 1405 "/root/dm_event/event_lib/include/event2/event.h"

size_t event_get_struct_event_size(void);
# 1417 "/root/dm_event/event_lib/include/event2/event.h"

const char *event_get_version(void);
# 1431 "/root/dm_event/event_lib/include/event2/event.h"

uint32_t event_get_version_number(void);
# 1469 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_priority_init(struct event_base *, int);
# 1479 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_get_npriorities(struct event_base *eb);
# 1490 "/root/dm_event/event_lib/include/event2/event.h"

int event_priority_set(struct event *, int);
# 1512 "/root/dm_event/event_lib/include/event2/event.h"

const struct timeval *event_base_init_common_timeout(struct event_base *base,
    const struct timeval *duration);
# 1539 "/root/dm_event/event_lib/include/event2/event.h"

void event_set_mem_functions(
 void *(*malloc_fn)(size_t sz),
 void *(*realloc_fn)(void *ptr, size_t sz),
 void (*free_fn)(void *ptr));
# 1559 "/root/dm_event/event_lib/include/event2/event.h"

void event_base_dump_events(struct event_base *, FILE *);
# 1573 "/root/dm_event/event_lib/include/event2/event.h"

void event_base_active_by_fd(struct event_base *base, int fd, short events);
# 1585 "/root/dm_event/event_lib/include/event2/event.h"

void event_base_active_by_signal(struct event_base *base, int sig);




typedef int (*event_base_foreach_event_cb)(const struct event_base *, const struct event *, void *);
# 1618 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_foreach_event(struct event_base *base, event_base_foreach_event_cb fn, void *arg);
# 1633 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_gettimeofday_cached(struct event_base *base,
    struct timeval *tv);
# 1649 "/root/dm_event/event_lib/include/event2/event.h"

int event_base_update_cache_time(struct event_base *base);
# 1666 "/root/dm_event/event_lib/include/event2/event.h"

void libevent_global_shutdown(void);
# 60 "event.c" 2
# 1 "/root/dm_event/event_lib/include/event2/event_struct.h" 1
# 55 "/root/dm_event/event_lib/include/event2/event_struct.h"
# 1 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 1
# 58 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
struct evkeyval {
 
# 59 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 3 4
struct { struct 
# 59 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
evkeyval 
# 59 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 3 4
*tqe_next; struct 
# 59 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
evkeyval 
# 59 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 3 4
* *tqe_prev; } 
# 59 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
                      next;

 char *key;
 char *value;
};


# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 3 4
struct 
# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
evkeyvalq 
# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 3 4
{ struct 
# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
evkeyval 
# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 3 4
*tqh_first; struct 
# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
evkeyval 
# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h" 3 4
* *tqh_last; }
# 65 "/root/dm_event/event_lib/include/event2/keyvalq_struct.h"
                               ;
# 56 "/root/dm_event/event_lib/include/event2/event_struct.h" 2
# 105 "/root/dm_event/event_lib/include/event2/event_struct.h"
struct event;

struct event_callback {
 
# 108 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
struct { struct 
# 108 "/root/dm_event/event_lib/include/event2/event_struct.h"
event_callback 
# 108 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
*tqe_next; struct 
# 108 "/root/dm_event/event_lib/include/event2/event_struct.h"
event_callback 
# 108 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
* *tqe_prev; } 
# 108 "/root/dm_event/event_lib/include/event2/event_struct.h"
                            evcb_active_next;
 short evcb_flags;
 uint8_t evcb_pri;
 uint8_t evcb_closure;

        union {
  void (*evcb_callback)(int, short, void *);
  void (*evcb_selfcb)(struct event_callback *, void *);
  void (*evcb_evfinalize)(struct event *, void *);
  void (*evcb_cbfinalize)(struct event_callback *, void *);
 } evcb_cb_union;
 void *evcb_arg;
};

struct event_base;
struct event {
 struct event_callback ev_evcallback;


 union {
  
# 128 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
 struct { struct 
# 128 "/root/dm_event/event_lib/include/event2/event_struct.h"
 event 
# 128 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
 *tqe_next; struct 
# 128 "/root/dm_event/event_lib/include/event2/event_struct.h"
 event 
# 128 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
 * *tqe_prev; } 
# 128 "/root/dm_event/event_lib/include/event2/event_struct.h"
                    ev_next_with_common_timeout;
  int min_heap_idx;
 } ev_timeout_pos;
 int ev_fd;

 struct event_base *ev_base;

 union {

  struct {
   
# 138 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
  struct { struct 
# 138 "/root/dm_event/event_lib/include/event2/event_struct.h"
  event 
# 138 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
  *le_next; struct 
# 138 "/root/dm_event/event_lib/include/event2/event_struct.h"
  event 
# 138 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
  **le_prev; } 
# 138 "/root/dm_event/event_lib/include/event2/event_struct.h"
                     ev_io_next;
   struct timeval ev_timeout;
  } ev_io;


  struct {
   
# 144 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
  struct { struct 
# 144 "/root/dm_event/event_lib/include/event2/event_struct.h"
  event 
# 144 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
  *le_next; struct 
# 144 "/root/dm_event/event_lib/include/event2/event_struct.h"
  event 
# 144 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
  **le_prev; } 
# 144 "/root/dm_event/event_lib/include/event2/event_struct.h"
                     ev_signal_next;
   short ev_ncalls;

   short *ev_pncalls;
  } ev_signal;
 } ev_;

 short ev_events;
 short ev_res;
 struct timeval ev_timeout;
};
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h"

# 202 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
struct 
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h"
event_list 
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
{ struct 
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h"
event 
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
*tqh_first; struct 
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h"
event 
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
* *tqh_last; }
# 202 "/root/dm_event/event_lib/include/event2/event_struct.h"
                             ;
# 212 "/root/dm_event/event_lib/include/event2/event_struct.h"

# 212 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
struct 
# 212 "/root/dm_event/event_lib/include/event2/event_struct.h"
event_dlist 
# 212 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
{ struct 
# 212 "/root/dm_event/event_lib/include/event2/event_struct.h"
event 
# 212 "/root/dm_event/event_lib/include/event2/event_struct.h" 3 4
*lh_first; }
# 212 "/root/dm_event/event_lib/include/event2/event_struct.h"
                             ;
# 61 "event.c" 2
# 1 "/root/dm_event/event_lib/include/event2/event_compat.h" 1
# 74 "/root/dm_event/event_lib/include/event2/event_compat.h"

struct event_base *event_init(void);
# 88 "/root/dm_event/event_lib/include/event2/event_compat.h"

int event_dispatch(void);
# 102 "/root/dm_event/event_lib/include/event2/event_compat.h"

int event_loop(int);
# 118 "/root/dm_event/event_lib/include/event2/event_compat.h"

int event_loopexit(const struct timeval *);
# 134 "/root/dm_event/event_lib/include/event2/event_compat.h"

int event_loopbreak(void);
# 146 "/root/dm_event/event_lib/include/event2/event_compat.h"

int event_once(int , short,
    void (*)(int, short, void *), void *, const struct timeval *);
# 160 "/root/dm_event/event_lib/include/event2/event_compat.h"

const char *event_get_method(void);
# 173 "/root/dm_event/event_lib/include/event2/event_compat.h"

int event_priority_init(int);
# 183 "/root/dm_event/event_lib/include/event2/event_compat.h"

void event_set(struct event *, int, short, void (*)(int, short, void *), void *);
# 62 "event.c" 2
# 1 "event-internal.h" 1
# 40 "event-internal.h"
# 1 "minheap-internal.h" 1
# 36 "minheap-internal.h"
# 1 "util-internal.h" 1
# 35 "util-internal.h"
# 1 "log-internal.h" 1
# 51 "log-internal.h"
 extern uint32_t event_debug_logging_mask_;






void event_err(int eval, const char *fmt, ...) __attribute__((format(printf, 2, 3))) __attribute__((noreturn));

void event_warn(const char *fmt, ...) __attribute__((format(printf, 1, 2)));

void event_sock_err(int eval, int sock, const char *fmt, ...) __attribute__((format(printf, 3, 4))) __attribute__((noreturn));

void event_sock_warn(int sock, const char *fmt, ...) __attribute__((format(printf, 2, 3)));

void event_errx(int eval, const char *fmt, ...) __attribute__((format(printf, 2, 3))) __attribute__((noreturn));

void event_warnx(const char *fmt, ...) __attribute__((format(printf, 1, 2)));

void event_msgx(const char *fmt, ...) __attribute__((format(printf, 1, 2)));

void event_debugx_(const char *fmt, ...) __attribute__((format(printf, 1, 2)));


void event_logv_(int severity, const char *errstr, const char *fmt, va_list ap)
 __attribute__((format(printf, 3, 0)));
# 36 "util-internal.h" 2






# 1 "/usr/include/sys/eventfd.h" 1 3 4
# 24 "/usr/include/sys/eventfd.h" 3 4
# 1 "/usr/include/bits/eventfd.h" 1 3 4
# 23 "/usr/include/bits/eventfd.h" 3 4

# 23 "/usr/include/bits/eventfd.h" 3 4
enum
  {
    EFD_SEMAPHORE = 00000001,

    EFD_CLOEXEC = 02000000,

    EFD_NONBLOCK = 00004000

  };
# 25 "/usr/include/sys/eventfd.h" 2 3 4


typedef uint64_t eventfd_t;






extern int eventfd (unsigned int __count, int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int eventfd_read (int __fd, eventfd_t *__value);


extern int eventfd_write (int __fd, eventfd_t __value);


# 43 "util-internal.h" 2



# 1 "time-internal.h" 1
# 56 "time-internal.h"

# 56 "time-internal.h"
long evutil_tv_to_msec_(const struct timeval *tv);

void evutil_usleep_(const struct timeval *tv);





struct evutil_monotonic_timer {






 int monotonic_clock;
# 86 "time-internal.h"
 struct timeval adjust_monotonic_clock;
 struct timeval last_time;
};


int evutil_configure_monotonic_time_(struct evutil_monotonic_timer *mt,
    int flags);

int evutil_gettime_monotonic_(struct evutil_monotonic_timer *mt, struct timeval *tv);
# 47 "util-internal.h" 2
# 1 "ipv6-internal.h" 1
# 48 "util-internal.h" 2
# 250 "util-internal.h"

int EVUTIL_ISALPHA_(char c);

int EVUTIL_ISALNUM_(char c);
int EVUTIL_ISSPACE_(char c);

int EVUTIL_ISDIGIT_(char c);

int EVUTIL_ISXDIGIT_(char c);
int EVUTIL_ISPRINT_(char c);
int EVUTIL_ISLOWER_(char c);
int EVUTIL_ISUPPER_(char c);

char EVUTIL_TOUPPER_(char c);

char EVUTIL_TOLOWER_(char c);




void evutil_rtrim_lws_(char *);
# 294 "util-internal.h"
int evutil_open_closeonexec_(const char *pathname, int flags, unsigned mode);


int evutil_read_file_(const char *filename, char **content_out, size_t *len_out,
    int is_binary);


int evutil_socket_connect_(int *fd_ptr, const struct sockaddr *sa, int socklen);

int evutil_socket_finished_connecting_(int fd);


int evutil_ersatz_socketpair_(int, int , int, int[]);

int evutil_resolve_(int family, const char *hostname, struct sockaddr *sa,
    socklen_t *socklen, int port);

const char *evutil_getenv_(const char *name);



struct evutil_weakrand_state {
 uint32_t seed;
};
# 330 "util-internal.h"

uint32_t evutil_weakrand_seed_(struct evutil_weakrand_state *state, uint32_t seed);





int32_t evutil_weakrand_(struct evutil_weakrand_state *seed);




int32_t evutil_weakrand_range_(struct evutil_weakrand_state *seed, int32_t top);
# 400 "util-internal.h"
struct evdns_base;
struct evdns_getaddrinfo_request;
typedef struct evdns_getaddrinfo_request* (*evdns_getaddrinfo_fn)(
    struct evdns_base *base,
    const char *nodename, const char *servname,
    const struct addrinfo *hints_in,
    void (*cb)(int, struct addrinfo *, void *), void *arg);

void evutil_set_evdns_getaddrinfo_fn_(evdns_getaddrinfo_fn fn);
typedef void (*evdns_getaddrinfo_cancel_fn)(
    struct evdns_getaddrinfo_request *req);

void evutil_set_evdns_getaddrinfo_cancel_fn_(evdns_getaddrinfo_cancel_fn fn);


struct addrinfo *evutil_new_addrinfo_(struct sockaddr *sa,
    socklen_t socklen, const struct addrinfo *hints);

struct addrinfo *evutil_addrinfo_append_(struct addrinfo *first,
    struct addrinfo *append);

void evutil_adjust_hints_for_addrconfig_(struct addrinfo *hints);

int evutil_getaddrinfo_common_(const char *nodename, const char *servname,
    struct addrinfo *hints, struct addrinfo **res, int *portnum);

struct evdns_getaddrinfo_request *evutil_getaddrinfo_async_(
    struct evdns_base *dns_base,
    const char *nodename, const char *servname,
    const struct addrinfo *hints_in,
    void (*cb)(int, struct addrinfo *, void *), void *arg);
void evutil_getaddrinfo_cancel_async_(struct evdns_getaddrinfo_request *data);




int evutil_sockaddr_is_loopback_(const struct sockaddr *sa);








const char *evutil_format_sockaddr_port_(const struct sockaddr *sa, char *out, size_t outlen);

int evutil_hex_char_to_int_(char c);


void evutil_free_secure_rng_globals_(void);
void evutil_free_globals_(void);
# 503 "util-internal.h"

int evutil_socket_(int domain, int type, int protocol);
int evutil_accept4_(int sockfd, struct sockaddr *addr,
    socklen_t *addrlen, int flags);



int evutil_make_internal_pipe_(int fd[2]);
int evutil_eventfd_(unsigned initval, int flags);
# 534 "util-internal.h"
void evutil_memclear_(void *mem, size_t len);

struct in_addr;
struct in6_addr;



int evutil_v4addr_is_local_(const struct in_addr *in);



int evutil_v6addr_is_local_(const struct in6_addr *in);
# 37 "minheap-internal.h" 2
# 1 "mm-internal.h" 1
# 46 "mm-internal.h"

void *event_mm_malloc_(size_t sz);
# 57 "mm-internal.h"

void *event_mm_calloc_(size_t count, size_t size);
# 68 "mm-internal.h"

char *event_mm_strdup_(const char *str);


void *event_mm_realloc_(void *p, size_t sz);

void event_mm_free_(void *p);
# 38 "minheap-internal.h" 2

typedef struct min_heap
{
 struct event** p;
 unsigned n, a;
} min_heap_t;

static inline void min_heap_ctor_(min_heap_t* s);
static inline void min_heap_dtor_(min_heap_t* s);
static inline void min_heap_elem_init_(struct event* e);
static inline int min_heap_elt_is_top_(const struct event *e);
static inline int min_heap_empty_(min_heap_t* s);
static inline unsigned min_heap_size_(min_heap_t* s);
static inline struct event* min_heap_top_(min_heap_t* s);
static inline int min_heap_reserve_(min_heap_t* s, unsigned n);
static inline int min_heap_push_(min_heap_t* s, struct event* e);
static inline struct event* min_heap_pop_(min_heap_t* s);
static inline int min_heap_adjust_(min_heap_t *s, struct event* e);
static inline int min_heap_erase_(min_heap_t* s, struct event* e);
static inline void min_heap_shift_up_(min_heap_t* s, unsigned hole_index, struct event* e);
static inline void min_heap_shift_up_unconditional_(min_heap_t* s, unsigned hole_index, struct event* e);
static inline void min_heap_shift_down_(min_heap_t* s, unsigned hole_index, struct event* e);




void min_heap_ctor_(min_heap_t* s) { s->p = 0; s->n = 0; s->a = 0; }
void min_heap_dtor_(min_heap_t* s) { if (s->p) event_mm_free_(s->p); }
void min_heap_elem_init_(struct event* e) { e->ev_timeout_pos.min_heap_idx = -1; }
int min_heap_empty_(min_heap_t* s) { return 0u == s->n; }
unsigned min_heap_size_(min_heap_t* s) { return s->n; }
struct event* min_heap_top_(min_heap_t* s) { return s->n ? *s->p : 0; }

int min_heap_push_(min_heap_t* s, struct event* e)
{
 if (s->n == 
# 73 "minheap-internal.h" 3 4
            (4294967295U) 
# 73 "minheap-internal.h"
                       || min_heap_reserve_(s, s->n + 1))
  return -1;
 min_heap_shift_up_(s, s->n++, e);
 return 0;
}

struct event* min_heap_pop_(min_heap_t* s)
{
 if (s->n)
 {
  struct event* e = *s->p;
  min_heap_shift_down_(s, 0u, s->p[--s->n]);
  e->ev_timeout_pos.min_heap_idx = -1;
  return e;
 }
 return 0;
}

int min_heap_elt_is_top_(const struct event *e)
{
 return e->ev_timeout_pos.min_heap_idx == 0;
}

int min_heap_erase_(min_heap_t* s, struct event* e)
{
 if (-1 != e->ev_timeout_pos.min_heap_idx)
 {
  struct event *last = s->p[--s->n];
  unsigned parent = (e->ev_timeout_pos.min_heap_idx - 1) / 2;





  if (e->ev_timeout_pos.min_heap_idx > 0 && ((((&(s->p[parent])->ev_timeout)->tv_sec == (&(last)->ev_timeout)->tv_sec) ? ((&(s->p[parent])->ev_timeout)->tv_usec > (&(last)->ev_timeout)->tv_usec) : ((&(s->p[parent])->ev_timeout)->tv_sec > (&(last)->ev_timeout)->tv_sec))))
   min_heap_shift_up_unconditional_(s, e->ev_timeout_pos.min_heap_idx, last);
  else
   min_heap_shift_down_(s, e->ev_timeout_pos.min_heap_idx, last);
  e->ev_timeout_pos.min_heap_idx = -1;
  return 0;
 }
 return -1;
}

int min_heap_adjust_(min_heap_t *s, struct event *e)
{
 if (-1 == e->ev_timeout_pos.min_heap_idx) {
  return min_heap_push_(s, e);
 } else {
  unsigned parent = (e->ev_timeout_pos.min_heap_idx - 1) / 2;


  if (e->ev_timeout_pos.min_heap_idx > 0 && ((((&(s->p[parent])->ev_timeout)->tv_sec == (&(e)->ev_timeout)->tv_sec) ? ((&(s->p[parent])->ev_timeout)->tv_usec > (&(e)->ev_timeout)->tv_usec) : ((&(s->p[parent])->ev_timeout)->tv_sec > (&(e)->ev_timeout)->tv_sec))))
   min_heap_shift_up_unconditional_(s, e->ev_timeout_pos.min_heap_idx, e);
  else
   min_heap_shift_down_(s, e->ev_timeout_pos.min_heap_idx, e);
  return 0;
 }
}

int min_heap_reserve_(min_heap_t* s, unsigned n)
{
 if (s->a < n)
 {
  struct event** p;
  unsigned a = s->a ? s->a * 2 : 8;
  if (a < n)
   a = n;




  if (!(p = (struct event**)event_mm_realloc_((s->p), (a * sizeof *p))))
   return -1;
  s->p = p;
  s->a = a;
 }
 return 0;
}

void min_heap_shift_up_unconditional_(min_heap_t* s, unsigned hole_index, struct event* e)
{
    unsigned parent = (hole_index - 1) / 2;
    do
    {
 (s->p[hole_index] = s->p[parent])->ev_timeout_pos.min_heap_idx = hole_index;
 hole_index = parent;
 parent = (hole_index - 1) / 2;
    } while (hole_index && ((((&(s->p[parent])->ev_timeout)->tv_sec == (&(e)->ev_timeout)->tv_sec) ? ((&(s->p[parent])->ev_timeout)->tv_usec > (&(e)->ev_timeout)->tv_usec) : ((&(s->p[parent])->ev_timeout)->tv_sec > (&(e)->ev_timeout)->tv_sec))));
    (s->p[hole_index] = e)->ev_timeout_pos.min_heap_idx = hole_index;
}

void min_heap_shift_up_(min_heap_t* s, unsigned hole_index, struct event* e)
{
    unsigned parent = (hole_index - 1) / 2;
    while (hole_index && ((((&(s->p[parent])->ev_timeout)->tv_sec == (&(e)->ev_timeout)->tv_sec) ? ((&(s->p[parent])->ev_timeout)->tv_usec > (&(e)->ev_timeout)->tv_usec) : ((&(s->p[parent])->ev_timeout)->tv_sec > (&(e)->ev_timeout)->tv_sec))))
    {
 (s->p[hole_index] = s->p[parent])->ev_timeout_pos.min_heap_idx = hole_index;
 hole_index = parent;
 parent = (hole_index - 1) / 2;
    }
    (s->p[hole_index] = e)->ev_timeout_pos.min_heap_idx = hole_index;
}

void min_heap_shift_down_(min_heap_t* s, unsigned hole_index, struct event* e)
{
    unsigned min_child = 2 * (hole_index + 1);
    while (min_child <= s->n)
 {
 min_child -= min_child == s->n || ((((&(s->p[min_child])->ev_timeout)->tv_sec == (&(s->p[min_child - 1])->ev_timeout)->tv_sec) ? ((&(s->p[min_child])->ev_timeout)->tv_usec > (&(s->p[min_child - 1])->ev_timeout)->tv_usec) : ((&(s->p[min_child])->ev_timeout)->tv_sec > (&(s->p[min_child - 1])->ev_timeout)->tv_sec)));
 if (!(((((&(e)->ev_timeout)->tv_sec == (&(s->p[min_child])->ev_timeout)->tv_sec) ? ((&(e)->ev_timeout)->tv_usec > (&(s->p[min_child])->ev_timeout)->tv_usec) : ((&(e)->ev_timeout)->tv_sec > (&(s->p[min_child])->ev_timeout)->tv_sec)))))
     break;
 (s->p[hole_index] = s->p[min_child])->ev_timeout_pos.min_heap_idx = hole_index;
 hole_index = min_child;
 min_child = 2 * (hole_index + 1);
 }
    (s->p[hole_index] = e)->ev_timeout_pos.min_heap_idx = hole_index;
}
# 41 "event-internal.h" 2
# 1 "evsignal-internal.h" 1
# 35 "evsignal-internal.h"
typedef void (*ev_sighandler_t)(int);



struct evsig_info {

 struct event ev_signal;

 int ev_signal_pair[2];

 int ev_signal_added;

 int ev_n_signals_added;




 struct sigaction **sh_old;




 int sh_old_max;
};
int evsig_init_(struct event_base *);
void evsig_dealloc_(struct event_base *);

void evsig_set_base_(struct event_base *base);
void evsig_free_globals_(void);
# 42 "event-internal.h" 2

# 1 "defer-internal.h" 1
# 38 "defer-internal.h"
struct event_callback;
typedef void (*deferred_cb_fn)(struct event_callback *, void *);
# 49 "defer-internal.h"

void event_deferred_cb_init_(struct event_callback *, uint8_t, deferred_cb_fn, void *);



void event_deferred_cb_set_priority_(struct event_callback *, uint8_t);




void event_deferred_cb_cancel_(struct event_base *, struct event_callback *);






int event_deferred_cb_schedule_(struct event_base *, struct event_callback *);
# 44 "event-internal.h" 2
# 86 "event-internal.h"
struct eventop {

 const char *name;





 void *(*init)(struct event_base *);
# 103 "event-internal.h"
 int (*add)(struct event_base *, int fd, short old, short events, void *fdinfo);

 int (*del)(struct event_base *, int fd, short old, short events, void *fdinfo);





 int (*dispatch)(struct event_base *, struct timeval *);

 void (*dealloc)(struct event_base *);


 int need_reinit;


 enum event_method_feature features;





 size_t fdinfo_len;
};
# 151 "event-internal.h"
struct event_signal_map {


 void **entries;

 int nentries;
};





struct common_timeout_list {

 struct event_list events;


 struct timeval duration;


 struct event timeout_event;

 struct event_base *base;
};




struct event_change;



struct event_changelist {
 struct event_change *changes;
 int n_changes;
 int changes_size;
};



extern int event_debug_mode_on_;






# 197 "event-internal.h" 3 4
struct 
# 197 "event-internal.h"
evcallback_list 
# 197 "event-internal.h" 3 4
{ struct 
# 197 "event-internal.h"
event_callback 
# 197 "event-internal.h" 3 4
*tqh_first; struct 
# 197 "event-internal.h"
event_callback 
# 197 "event-internal.h" 3 4
* *tqh_last; }
# 197 "event-internal.h"
                                          ;


struct event_once {
 
# 201 "event-internal.h" 3 4
struct { struct 
# 201 "event-internal.h"
event_once 
# 201 "event-internal.h" 3 4
*le_next; struct 
# 201 "event-internal.h"
event_once 
# 201 "event-internal.h" 3 4
**le_prev; } 
# 201 "event-internal.h"
                       next_once;
 struct event ev;

 void (*cb)(int, short, void *);
 void *arg;
};

struct event_base {


 const struct eventop *evsel;



 void *evbase;



 struct event_changelist changelist;



 const struct eventop *evsigsel;

 struct evsig_info sig;


 int virtual_event_count;

 int virtual_event_count_max;

 int event_count;

 int event_count_max;

 int event_count_active;

 int event_count_active_max;



 int event_gotterm;

 int event_break;

 int event_continue;


 int event_running_priority;



 int running_loop;





 int n_deferreds_queued;






 struct evcallback_list *activequeues;

 int nactivequeues;


 struct evcallback_list active_later_queue;





 struct common_timeout_list **common_timeout_queues;

 int n_common_timeouts;

 int n_common_timeouts_allocated;


 struct event_signal_map io;


 struct event_signal_map sigmap;


 struct min_heap timeheap;



 struct timeval tv_cache;

 struct evutil_monotonic_timer monotonic_timer;



 struct timeval tv_clock_diff;

 time_t last_updated_clock_diff;




 unsigned long th_owner_id;

 void *th_base_lock;


 void *current_event_cond;

 int current_event_waiters;


 struct event_callback *current_event;







 enum event_base_config_flag flags;

 struct timeval max_dispatch_time;
 int max_dispatch_callbacks;
 int limit_callbacks_after_prio;




 int is_notify_pending;


 int th_notify_fd[2];


 struct event th_notify;

 int (*th_notify_fn)(struct event_base *base);



 struct evutil_weakrand_state weakrand_seed;


 
# 349 "event-internal.h" 3 4
struct 
# 349 "event-internal.h"
once_event_list 
# 349 "event-internal.h" 3 4
{ struct 
# 349 "event-internal.h"
event_once 
# 349 "event-internal.h" 3 4
*lh_first; } 
# 349 "event-internal.h"
                                       once_events;

};

struct event_config_entry {
 
# 354 "event-internal.h" 3 4
struct { struct 
# 354 "event-internal.h"
event_config_entry 
# 354 "event-internal.h" 3 4
*tqe_next; struct 
# 354 "event-internal.h"
event_config_entry 
# 354 "event-internal.h" 3 4
* *tqe_prev; } 
# 354 "event-internal.h"
                                next;

 const char *avoid_method;
};
# 372 "event-internal.h"
struct event_config {
 
# 373 "event-internal.h" 3 4
struct 
# 373 "event-internal.h"
event_configq 
# 373 "event-internal.h" 3 4
{ struct 
# 373 "event-internal.h"
event_config_entry 
# 373 "event-internal.h" 3 4
*tqh_first; struct 
# 373 "event-internal.h"
event_config_entry 
# 373 "event-internal.h" 3 4
* *tqh_last; } 
# 373 "event-internal.h"
                                              entries;

 int n_cpus_hint;
 struct timeval max_dispatch_interval;
 int max_dispatch_callbacks;
 int limit_callbacks_after_prio;
 enum event_method_feature require_features;
 enum event_base_config_flag flags;
};
# 433 "event-internal.h"
int evsig_set_handler_(struct event_base *base, int evsignal,
     void (*fn)(int));
int evsig_restore_handler_(struct event_base *base, int evsignal);

int event_add_nolock_(struct event *ev,
    const struct timeval *tv, int tv_is_absolute);
# 453 "event-internal.h"
int event_del_nolock_(struct event *ev, int blocking);
int event_remove_timer_nolock_(struct event *ev);

void event_active_nolock_(struct event *ev, int res, short count);

int event_callback_activate_(struct event_base *, struct event_callback *);
int event_callback_activate_nolock_(struct event_base *, struct event_callback *);
int event_callback_cancel_(struct event_base *base,
    struct event_callback *evcb);

void event_callback_finalize_nolock_(struct event_base *base, unsigned flags, struct event_callback *evcb, void (*cb)(struct event_callback *, void *));

void event_callback_finalize_(struct event_base *base, unsigned flags, struct event_callback *evcb, void (*cb)(struct event_callback *, void *));
int event_callback_finalize_many_(struct event_base *base, int n_cbs, struct event_callback **evcb, void (*cb)(struct event_callback *, void *));



void event_active_later_(struct event *ev, int res);
void event_active_later_nolock_(struct event *ev, int res);
int event_callback_activate_later_nolock_(struct event_base *base,
    struct event_callback *evcb);
int event_callback_cancel_nolock_(struct event_base *base,
    struct event_callback *evcb, int even_if_finalizing);
void event_callback_init_(struct event_base *base,
    struct event_callback *cb);



void event_base_add_virtual_(struct event_base *base);
void event_base_del_virtual_(struct event_base *base);








void event_base_assert_ok_(struct event_base *base);
void event_base_assert_ok_nolock_(struct event_base *base);
# 503 "event-internal.h"
int event_base_foreach_event_nolock_(struct event_base *base,
    event_base_foreach_event_cb cb, void *arg);






void event_disable_debug_mode(void);
# 63 "event.c" 2

# 1 "evthread-internal.h" 1
# 36 "evthread-internal.h"
# 1 "/root/dm_event/event_lib/include/event2/thread.h" 1
# 95 "/root/dm_event/event_lib/include/event2/thread.h"
struct evthread_lock_callbacks {


 int lock_api_version;







 unsigned supported_locktypes;


 void *(*alloc)(unsigned locktype);


 void (*free)(void *lock, unsigned locktype);


 int (*lock)(unsigned mode, void *lock);


 int (*unlock)(unsigned mode, void *lock);
};
# 129 "/root/dm_event/event_lib/include/event2/thread.h"

int evthread_set_lock_callbacks(const struct evthread_lock_callbacks *);



struct timeval;





struct evthread_condition_callbacks {


 int condition_api_version;




 void *(*alloc_condition)(unsigned condtype);

 void (*free_condition)(void *cond);






 int (*signal_condition)(void *cond, int broadcast);
# 168 "/root/dm_event/event_lib/include/event2/thread.h"
 int (*wait_condition)(void *cond, void *lock,
     const struct timeval *timeout);
};
# 180 "/root/dm_event/event_lib/include/event2/thread.h"

int evthread_set_condition_callbacks(
 const struct evthread_condition_callbacks *);
# 191 "/root/dm_event/event_lib/include/event2/thread.h"

void evthread_set_id_callback(
    unsigned long (*id_fn)(void));
# 214 "/root/dm_event/event_lib/include/event2/thread.h"

int evthread_use_pthreads(void);
# 227 "/root/dm_event/event_lib/include/event2/thread.h"

void evthread_enable_lock_debugging(void);




void evthread_enable_lock_debuging(void);



struct event_base;
# 246 "/root/dm_event/event_lib/include/event2/thread.h"

int evthread_make_base_notifiable(struct event_base *base);
# 37 "evthread-internal.h" 2


struct event_base;
# 52 "evthread-internal.h"

extern struct evthread_lock_callbacks evthread_lock_fns_;

extern struct evthread_condition_callbacks evthread_cond_fns_;
extern unsigned long (*evthread_id_fn_)(void);

extern int evthread_lock_debugging_enabled_;
# 138 "evthread-internal.h"
static inline int EVLOCK_TRY_LOCK_(void *lock);
static inline int
EVLOCK_TRY_LOCK_(void *lock)
{
 if (lock && evthread_lock_fns_.lock) {
  int r = evthread_lock_fns_.lock(0x10, lock);
  return !r;
 } else {


  return 1;
 }
}
# 370 "evthread-internal.h"

int evthread_is_debug_lock_held_(void *lock);
void *evthread_debug_get_real_lock_(void *lock);

void *evthread_setup_global_lock_(void *lock_, unsigned locktype,
    int enable_locks);
# 387 "evthread-internal.h"
int event_global_setup_locks_(const int enable_locks);
int evsig_global_setup_locks_(const int enable_locks);
int evutil_global_setup_locks_(const int enable_locks);
int evutil_secure_rng_global_setup_locks_(const int enable_locks);



struct evthread_lock_callbacks *evthread_get_lock_callbacks(void);

struct evthread_condition_callbacks *evthread_get_condition_callbacks(void);

void evthreadimpl_disable_lock_debugging_(void);
# 65 "event.c" 2



# 1 "evmap-internal.h" 1
# 37 "evmap-internal.h"
struct event_base;
struct event;



void evmap_io_initmap_(struct event_signal_map* ctx);
void evmap_signal_initmap_(struct event_signal_map* ctx);





void evmap_io_clear_(struct event_signal_map* ctx);
void evmap_signal_clear_(struct event_signal_map* ctx);
# 62 "evmap-internal.h"
int evmap_io_add_(struct event_base *base, int fd, struct event *ev);
# 71 "evmap-internal.h"
int evmap_io_del_(struct event_base *base, int fd, struct event *ev);






void evmap_io_active_(struct event_base *base, int fd, short events);





int evmap_signal_add_(struct event_base *base, int signum, struct event *ev);
int evmap_signal_del_(struct event_base *base, int signum, struct event *ev);
void evmap_signal_active_(struct event_base *base, int signum, int ncalls);




void *evmap_io_get_fdinfo_(struct event_signal_map *ctx, int fd);




int evmap_reinit_(struct event_base *base);




void evmap_delete_all_(struct event_base *base);




void evmap_check_integrity_(struct event_base *base);






int evmap_foreach_event_(struct event_base *base,
    event_base_foreach_event_cb fn,
    void *arg);
# 69 "event.c" 2
# 1 "iocp-internal.h" 1
# 34 "iocp-internal.h"
struct event_overlapped;
struct event_iocp_port;
struct evbuffer;
typedef void (*iocp_callback)(struct event_overlapped *, uintptr_t, ssize_t, int success);
# 99 "iocp-internal.h"
struct event_overlapped {
 iocp_callback cb;
};
# 110 "iocp-internal.h"

void event_overlapped_init_(struct event_overlapped *, iocp_callback cb);






struct evbuffer *evbuffer_overlapped_new_(int fd);


int evbuffer_overlapped_get_fd_(struct evbuffer *buf);

void evbuffer_overlapped_set_fd_(struct evbuffer *buf, int fd);
# 137 "iocp-internal.h"

int evbuffer_launch_read_(struct evbuffer *buf, size_t n, struct event_overlapped *ol);
# 152 "iocp-internal.h"

int evbuffer_launch_write_(struct evbuffer *buf, ssize_t n, struct event_overlapped *ol);



void evbuffer_commit_read_(struct evbuffer *, ssize_t);

void evbuffer_commit_write_(struct evbuffer *, ssize_t);






struct event_iocp_port *event_iocp_port_launch_(int n_cpus);





int event_iocp_port_associate_(struct event_iocp_port *port, int fd,
    uintptr_t key);








int event_iocp_shutdown_(struct event_iocp_port *port, long waitMsec);



int event_iocp_activate_overlapped_(struct event_iocp_port *port,
    struct event_overlapped *o,
    uintptr_t key, uint32_t n_bytes);

struct event_base;


struct event_iocp_port *event_base_get_iocp_(struct event_base *base);



int event_base_start_iocp_(struct event_base *base, int n_cpus);
void event_base_stop_iocp_(struct event_base *base);



struct bufferevent *bufferevent_async_new_(struct event_base *base,
    int fd, int options);


void bufferevent_async_set_connected_(struct bufferevent *bev);
int bufferevent_async_can_connect_(struct bufferevent *bev);
int bufferevent_async_connect_(struct bufferevent *bev, int fd,
 const struct sockaddr *sa, int socklen);
# 70 "event.c" 2
# 1 "changelist-internal.h" 1
# 53 "changelist-internal.h"
struct event_change {

 int fd;


 short old_events;




 uint8_t read_change;
 uint8_t write_change;
 uint8_t close_change;
};
# 86 "changelist-internal.h"
void event_changelist_init_(struct event_changelist *changelist);



void event_changelist_remove_all_(struct event_changelist *changelist,
    struct event_base *base);

void event_changelist_freemem_(struct event_changelist *changelist);


int event_changelist_add_(struct event_base *base, int fd, short old, short events,
    void *p);

int event_changelist_del_(struct event_base *base, int fd, short old, short events,
    void *p);
# 71 "event.c" 2

# 1 "ht-internal.h" 1
# 62 "ht-internal.h"
static inline unsigned
ht_improve_hash_(unsigned h)
{


  h += ~(h << 9);
  h ^= ((h >> 14) | (h << 18));
  h += (h << 4);
  h ^= ((h >> 10) | (h << 22));
  return h;
}
# 90 "ht-internal.h"
static inline unsigned
ht_string_hash_(const char *s)
{
  unsigned h;
  const unsigned char *cp = (const unsigned char *)s;
  h = *cp << 7;
  while (*cp) {
    h = (1000003*h) ^ *cp++;
  }

  h ^= (unsigned)(cp-(const unsigned char*)s);
  return h;
}
# 73 "event.c" 2
# 84 "event.c"
extern const struct eventop selectops;


extern const struct eventop pollops;


extern const struct eventop epollops;
# 103 "event.c"
static const struct eventop *eventops[] = {







 &epollops,





 &pollops,


 &selectops,




 
# 125 "event.c" 3 4
((void *)0)

# 126 "event.c"
};



struct event_base *event_global_current_base_ = 
# 130 "event.c" 3 4
                                               ((void *)0)
# 130 "event.c"
                                                   ;




static void *event_self_cbarg_ptr_ = 
# 135 "event.c" 3 4
                                    ((void *)0)
# 135 "event.c"
                                        ;


static void event_queue_insert_active(struct event_base *, struct event_callback *);
static void event_queue_insert_active_later(struct event_base *, struct event_callback *);
static void event_queue_insert_timeout(struct event_base *, struct event *);
static void event_queue_insert_inserted(struct event_base *, struct event *);
static void event_queue_remove_active(struct event_base *, struct event_callback *);
static void event_queue_remove_active_later(struct event_base *, struct event_callback *);
static void event_queue_remove_timeout(struct event_base *, struct event *);
static void event_queue_remove_inserted(struct event_base *, struct event *);
static void event_queue_make_later_events_active(struct event_base *base);

static int evthread_make_base_notifiable_nolock_(struct event_base *base);
static int event_del_(struct event *ev, int blocking);






static int event_haveevents(struct event_base *);

static int event_process_active(struct event_base *);

static int timeout_next(struct event_base *, struct timeval **);
static void timeout_process(struct event_base *);

static inline void event_signal_closure(struct event_base *, struct event *ev);
static inline void event_persist_closure(struct event_base *, struct event *ev);

static int evthread_notify_base(struct event_base *base);

static void insert_common_timeout_inorder(struct common_timeout_list *ctl,
    struct event *ev);
# 178 "event.c"
struct event_debug_entry {
 struct { struct event_debug_entry *hte_next; } node;
 const struct event *ptr;
 unsigned added : 1;
};

static inline unsigned
hash_debug_entry(const struct event_debug_entry *e)
{




 unsigned u = (unsigned) ((uintptr_t) e->ptr);



 return (u >> 6);
}

static inline int
eq_debug_entry(const struct event_debug_entry *a,
    const struct event_debug_entry *b)
{
 return a->ptr == b->ptr;
}

int event_debug_mode_on_ = 0;
# 219 "event.c"
int event_debug_created_threadable_ctx_ = 0;



static int event_debug_mode_too_late = 0;

static void *event_debug_map_lock_ = 
# 225 "event.c" 3 4
                                    ((void *)0)
# 225 "event.c"
                                        ;

static struct event_debug_map { struct event_debug_entry **hth_table; unsigned hth_table_length; unsigned hth_n_entries; unsigned hth_load_limit; int hth_prime_idx; } global_debug_map =
 { 
# 228 "event.c" 3 4
((void *)0)
# 228 "event.c"
, 0, 0, 0, -1 };

int event_debug_map_HT_GROW(struct event_debug_map *ht, unsigned min_capacity); void event_debug_map_HT_CLEAR(struct event_debug_map *ht); int event_debug_map_HT_REP_IS_BAD_(const struct event_debug_map *ht); static inline void event_debug_map_HT_INIT(struct event_debug_map *head) { head->hth_table_length = 0; head->hth_table = 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; head->hth_n_entries = 0; head->hth_load_limit = 0; head->hth_prime_idx = -1; } static inline struct event_debug_entry ** event_debug_map_HT_FIND_P_(struct event_debug_map *head, struct event_debug_entry *elm) { struct event_debug_entry **p; if (!head->hth_table) return 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; p = &((head)->hth_table[(hash_debug_entry(elm)) % head->hth_table_length]); while (*p) { if (eq_debug_entry(*p, elm)) return p; p = &(*p)->node.hte_next; } return p; } static inline struct event_debug_entry * event_debug_map_HT_FIND(const struct event_debug_map *head, struct event_debug_entry *elm) { struct event_debug_entry **p; struct event_debug_map *h = (struct event_debug_map *) head; ((void)0); p = event_debug_map_HT_FIND_P_(h, elm); return p ? *p : 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; } static inline void event_debug_map_HT_INSERT(struct event_debug_map *head, struct event_debug_entry *elm) { struct event_debug_entry **p; if (!head->hth_table || head->hth_n_entries >= head->hth_load_limit) event_debug_map_HT_GROW(head, head->hth_n_entries+1); ++head->hth_n_entries; ((void)0); p = &((head)->hth_table[(hash_debug_entry(elm)) % head->hth_table_length]); elm->node.hte_next = *p; *p = elm; } static inline struct event_debug_entry * event_debug_map_HT_REPLACE(struct event_debug_map *head, struct event_debug_entry *elm) { struct event_debug_entry **p, *r; if (!head->hth_table || head->hth_n_entries >= head->hth_load_limit) event_debug_map_HT_GROW(head, head->hth_n_entries+1); ((void)0); p = event_debug_map_HT_FIND_P_(head, elm); r = *p; *p = elm; if (r && (r!=elm)) { elm->node.hte_next = r->node.hte_next; r->node.hte_next = 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; return r; } else { ++head->hth_n_entries; return 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; } } static inline struct event_debug_entry * event_debug_map_HT_REMOVE(struct event_debug_map *head, struct event_debug_entry *elm) { struct event_debug_entry **p, *r; ((void)0); p = event_debug_map_HT_FIND_P_(head,elm); if (!p || !*p) return 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; r = *p; *p = r->node.hte_next; r->node.hte_next = 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; --head->hth_n_entries; return r; } static inline void event_debug_map_HT_FOREACH_FN(struct event_debug_map *head, int (*fn)(struct event_debug_entry *, void *), void *data) { unsigned idx; struct event_debug_entry **p, **nextp, *next; if (!head->hth_table) return; for (idx=0; idx < head->hth_table_length; ++idx) { p = &head->hth_table[idx]; while (*p) { nextp = &(*p)->node.hte_next; next = *nextp; if (fn(*p, data)) { --head->hth_n_entries; *p = next; } else { p = nextp; } } } } static inline struct event_debug_entry ** event_debug_map_HT_START(struct event_debug_map *head) { unsigned b = 0; while (b < head->hth_table_length) { if (head->hth_table[b]) return &head->hth_table[b]; ++b; } return 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; } static inline struct event_debug_entry ** event_debug_map_HT_NEXT(struct event_debug_map *head, struct event_debug_entry **elm) { if ((*elm)->node.hte_next) { return &(*elm)->node.hte_next; } else { unsigned b = ((hash_debug_entry(*elm)) % head->hth_table_length)+1; while (b < head->hth_table_length) { if (head->hth_table[b]) return &head->hth_table[b]; ++b; } return 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; } } static inline struct event_debug_entry ** event_debug_map_HT_NEXT_RMV(struct event_debug_map *head, struct event_debug_entry **elm) { unsigned h = (hash_debug_entry(*elm)); *elm = (*elm)->node.hte_next; --head->hth_n_entries; if (*elm) { return elm; } else { unsigned b = (h % head->hth_table_length)+1; while (b < head->hth_table_length) { if (head->hth_table[b]) return &head->hth_table[b]; ++b; } return 
# 230 "event.c" 3 4
((void *)0)
# 230 "event.c"
; } }

static unsigned event_debug_map_PRIMES[] = { 53, 97, 193, 389, 769, 1543, 3079, 6151, 12289, 24593, 49157, 98317, 196613, 393241, 786433, 1572869, 3145739, 6291469, 12582917, 25165843, 50331653, 100663319, 201326611, 402653189, 805306457, 1610612741 }; static unsigned event_debug_map_N_PRIMES = (unsigned)(sizeof(event_debug_map_PRIMES)/sizeof(event_debug_map_PRIMES[0])); int event_debug_map_HT_GROW(struct event_debug_map *head, unsigned size) { unsigned new_len, new_load_limit; int prime_idx; struct event_debug_entry **new_table; if (head->hth_prime_idx == (int)event_debug_map_N_PRIMES - 1) return 0; if (head->hth_load_limit > size) return 0; prime_idx = head->hth_prime_idx; do { new_len = event_debug_map_PRIMES[++prime_idx]; new_load_limit = (unsigned)(0.5*new_len); } while (new_load_limit <= size && prime_idx < (int)event_debug_map_N_PRIMES); if ((new_table = event_mm_malloc_(new_len*sizeof(struct event_debug_entry*)))) { unsigned b; memset(new_table, 0, new_len*sizeof(struct event_debug_entry*)); for (b = 0; b < head->hth_table_length; ++b) { struct event_debug_entry *elm, *next; unsigned b2; elm = head->hth_table[b]; while (elm) { next = elm->node.hte_next; b2 = (hash_debug_entry(elm)) % new_len; elm->node.hte_next = new_table[b2]; new_table[b2] = elm; elm = next; } } if (head->hth_table) event_mm_free_(head->hth_table); head->hth_table = new_table; } else { unsigned b, b2; new_table = event_mm_realloc_((head->hth_table), (new_len*sizeof(struct event_debug_entry*))); if (!new_table) return -1; memset(new_table + head->hth_table_length, 0, (new_len - head->hth_table_length)*sizeof(struct event_debug_entry*)); for (b=0; b < head->hth_table_length; ++b) { struct event_debug_entry *e, **pE; for (pE = &new_table[b], e = *pE; e != 
# 232 "event.c" 3 4
((void *)0)
# 232 "event.c"
; e = *pE) { b2 = (hash_debug_entry(e)) % new_len; if (b2 == b) { pE = &e->node.hte_next; } else { *pE = e->node.hte_next; e->node.hte_next = new_table[b2]; new_table[b2] = e; } } } head->hth_table = new_table; } head->hth_table_length = new_len; head->hth_prime_idx = prime_idx; head->hth_load_limit = new_load_limit; return 0; } void event_debug_map_HT_CLEAR(struct event_debug_map *head) { if (head->hth_table) event_mm_free_(head->hth_table); event_debug_map_HT_INIT(head); } int event_debug_map_HT_REP_IS_BAD_(const struct event_debug_map *head) { unsigned n, i; struct event_debug_entry *elm; if (!head->hth_table_length) { if (!head->hth_table && !head->hth_n_entries && !head->hth_load_limit && head->hth_prime_idx == -1) return 0; else return 1; } if (!head->hth_table || head->hth_prime_idx < 0 || !head->hth_load_limit) return 2; if (head->hth_n_entries > head->hth_load_limit) return 3; if (head->hth_table_length != event_debug_map_PRIMES[head->hth_prime_idx]) return 4; if (head->hth_load_limit != (unsigned)(0.5*head->hth_table_length)) return 5; for (n = i = 0; i < head->hth_table_length; ++i) { for (elm = head->hth_table[i]; elm; elm = elm->node.hte_next) { if ((hash_debug_entry(elm)) != hash_debug_entry(elm)) return 1000 + i; if (((hash_debug_entry(elm)) % head->hth_table_length) != i) return 10000 + i; ++n; } } if (n != head->hth_n_entries) return 6; return 0; }



static void event_debug_note_setup_(const struct event *ev)
{
 struct event_debug_entry *dent, find;

 if (!event_debug_mode_on_)
  goto out;

 find.ptr = ev;
 do { if (event_debug_map_lock_) evthread_lock_fns_.lock(0, event_debug_map_lock_); } while (0);
 dent = event_debug_map_HT_FIND((&global_debug_map), (&find));
 if (dent) {
  dent->added = 0;
 } else {
  dent = event_mm_malloc_(sizeof(*dent));
  if (!dent)
   event_err(1,
       "Out of memory in debugging code");
  dent->ptr = ev;
  dent->added = 0;
  event_debug_map_HT_INSERT((&global_debug_map), (dent));
 }
 do { if (event_debug_map_lock_) evthread_lock_fns_.unlock(0, event_debug_map_lock_); } while (0);

out:
 event_debug_mode_too_late = 1;
}

static void event_debug_note_teardown_(const struct event *ev)
{
 struct event_debug_entry *dent, find;

 if (!event_debug_mode_on_)
  goto out;

 find.ptr = ev;
 do { if (event_debug_map_lock_) evthread_lock_fns_.lock(0, event_debug_map_lock_); } while (0);
 dent = event_debug_map_HT_REMOVE((&global_debug_map), (&find));
 if (dent)
  event_mm_free_(dent);
 do { if (event_debug_map_lock_) evthread_lock_fns_.unlock(0, event_debug_map_lock_); } while (0);

out:
 event_debug_mode_too_late = 1;
}

static void event_debug_note_add_(const struct event *ev)
{
 struct event_debug_entry *dent,find;

 if (!event_debug_mode_on_)
  goto out;

 find.ptr = ev;
 do { if (event_debug_map_lock_) evthread_lock_fns_.lock(0, event_debug_map_lock_); } while (0);
 dent = event_debug_map_HT_FIND((&global_debug_map), (&find));
 if (dent) {
  dent->added = 1;
 } else {
  event_errx(((int)0xdeaddead),
      "%s: noting an add on a non-setup event %p"
      " (events: 0x%x, fd: ""%d"
      ", flags: 0x%x)",
      __func__, ev, ev->ev_events,
      (ev->ev_fd), ev->ev_evcallback.evcb_flags);
 }
 do { if (event_debug_map_lock_) evthread_lock_fns_.unlock(0, event_debug_map_lock_); } while (0);

out:
 event_debug_mode_too_late = 1;
}

static void event_debug_note_del_(const struct event *ev)
{
 struct event_debug_entry *dent, find;

 if (!event_debug_mode_on_)
  goto out;

 find.ptr = ev;
 do { if (event_debug_map_lock_) evthread_lock_fns_.lock(0, event_debug_map_lock_); } while (0);
 dent = event_debug_map_HT_FIND((&global_debug_map), (&find));
 if (dent) {
  dent->added = 0;
 } else {
  event_errx(((int)0xdeaddead),
      "%s: noting a del on a non-setup event %p"
      " (events: 0x%x, fd: ""%d"
      ", flags: 0x%x)",
      __func__, ev, ev->ev_events,
      (ev->ev_fd), ev->ev_evcallback.evcb_flags);
 }
 do { if (event_debug_map_lock_) evthread_lock_fns_.unlock(0, event_debug_map_lock_); } while (0);

out:
 event_debug_mode_too_late = 1;
}

static void event_debug_assert_is_setup_(const struct event *ev)
{
 struct event_debug_entry *dent, find;

 if (!event_debug_mode_on_)
  return;

 find.ptr = ev;
 do { if (event_debug_map_lock_) evthread_lock_fns_.lock(0, event_debug_map_lock_); } while (0);
 dent = event_debug_map_HT_FIND((&global_debug_map), (&find));
 if (!dent) {
  event_errx(((int)0xdeaddead),
      "%s called on a non-initialized event %p"
      " (events: 0x%x, fd: ""%d"
      ", flags: 0x%x)",
      __func__, ev, ev->ev_events,
      (ev->ev_fd), ev->ev_evcallback.evcb_flags);
 }
 do { if (event_debug_map_lock_) evthread_lock_fns_.unlock(0, event_debug_map_lock_); } while (0);
}

static void event_debug_assert_not_added_(const struct event *ev)
{
 struct event_debug_entry *dent, find;

 if (!event_debug_mode_on_)
  return;

 find.ptr = ev;
 do { if (event_debug_map_lock_) evthread_lock_fns_.lock(0, event_debug_map_lock_); } while (0);
 dent = event_debug_map_HT_FIND((&global_debug_map), (&find));
 if (dent && dent->added) {
  event_errx(((int)0xdeaddead),
      "%s called on an already added event %p"
      " (events: 0x%x, fd: ""%d"", "
      "flags: 0x%x)",
      __func__, ev, ev->ev_events,
      (ev->ev_fd), ev->ev_evcallback.evcb_flags);
 }
 do { if (event_debug_map_lock_) evthread_lock_fns_.unlock(0, event_debug_map_lock_); } while (0);
}
static void event_debug_assert_socket_nonblocking_(int fd)
{
 if (!event_debug_mode_on_)
  return;
 if (fd < 0)
  return;


 {
  int flags;
  if ((flags = fcntl(fd, 
# 384 "event.c" 3 4
                        3
# 384 "event.c"
                               , 
# 384 "event.c" 3 4
                                 ((void *)0)
# 384 "event.c"
                                     )) >= 0) {
   do { if (__builtin_expect(!!(!(flags & 
# 385 "event.c" 3 4
  04000
# 385 "event.c"
  )),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",385,"flags & O_NONBLOCK",__func__); (void)fprintf(
# 385 "event.c" 3 4
  stderr
# 385 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",385,"flags & O_NONBLOCK",__func__); abort(); } } while (0);
  }
 }

}
# 412 "event.c"
static int
gettime(struct event_base *base, struct timeval *tp)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",415,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 415 "event.c" 3 4
stderr
# 415 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",415,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);



 if (base->tv_cache.tv_sec) {
  *tp = base->tv_cache;
  return (0);
 }

 if (evutil_gettime_monotonic_(&base->monotonic_timer, tp) == -1) {
  return -1;
 }

 if (base->last_updated_clock_diff + 5
     < tp->tv_sec) {
  struct timeval tv;
  gettimeofday((&tv), (
# 431 "event.c" 3 4
 ((void *)0)
# 431 "event.c"
 ));
  
# 432 "event.c" 3 4
 do { (
# 432 "event.c"
 (&base->tv_clock_diff)
# 432 "event.c" 3 4
 )->tv_sec = (
# 432 "event.c"
 (&tv)
# 432 "event.c" 3 4
 )->tv_sec - (
# 432 "event.c"
 (tp)
# 432 "event.c" 3 4
 )->tv_sec; (
# 432 "event.c"
 (&base->tv_clock_diff)
# 432 "event.c" 3 4
 )->tv_usec = (
# 432 "event.c"
 (&tv)
# 432 "event.c" 3 4
 )->tv_usec - (
# 432 "event.c"
 (tp)
# 432 "event.c" 3 4
 )->tv_usec; if ((
# 432 "event.c"
 (&base->tv_clock_diff)
# 432 "event.c" 3 4
 )->tv_usec < 0) { --(
# 432 "event.c"
 (&base->tv_clock_diff)
# 432 "event.c" 3 4
 )->tv_sec; (
# 432 "event.c"
 (&base->tv_clock_diff)
# 432 "event.c" 3 4
 )->tv_usec += 1000000; } } while (0)
# 432 "event.c"
                                               ;
  base->last_updated_clock_diff = tp->tv_sec;
 }

 return 0;
}

int
event_base_gettimeofday_cached(struct event_base *base, struct timeval *tv)
{
 int r;
 if (!base) {
  base = event_global_current_base_;
  if (!event_global_current_base_)
   return gettimeofday((tv), (
# 446 "event.c" 3 4
         ((void *)0)
# 446 "event.c"
         ));
 }

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 if (base->tv_cache.tv_sec == 0) {
  r = gettimeofday((tv), (
# 451 "event.c" 3 4
     ((void *)0)
# 451 "event.c"
     ));
 } else {
  
# 453 "event.c" 3 4
 do { (
# 453 "event.c"
 (tv)
# 453 "event.c" 3 4
 )->tv_sec = (
# 453 "event.c"
 (&base->tv_cache)
# 453 "event.c" 3 4
 )->tv_sec + (
# 453 "event.c"
 (&base->tv_clock_diff)
# 453 "event.c" 3 4
 )->tv_sec; (
# 453 "event.c"
 (tv)
# 453 "event.c" 3 4
 )->tv_usec = (
# 453 "event.c"
 (&base->tv_cache)
# 453 "event.c" 3 4
 )->tv_usec + (
# 453 "event.c"
 (&base->tv_clock_diff)
# 453 "event.c" 3 4
 )->tv_usec; if ((
# 453 "event.c"
 (tv)
# 453 "event.c" 3 4
 )->tv_usec >= 1000000) { ++(
# 453 "event.c"
 (tv)
# 453 "event.c" 3 4
 )->tv_sec; (
# 453 "event.c"
 (tv)
# 453 "event.c" 3 4
 )->tv_usec -= 1000000; } } while (0)
# 453 "event.c"
                                                           ;
  r = 0;
 }
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return r;
}


static inline void
clear_time_cache(struct event_base *base)
{
 base->tv_cache.tv_sec = 0;
}


static inline void
update_time_cache(struct event_base *base)
{
 base->tv_cache.tv_sec = 0;
 if (!(base->flags & EVENT_BASE_FLAG_NO_CACHE_TIME))
     gettime(base, &base->tv_cache);
}

int
event_base_update_cache_time(struct event_base *base)
{

 if (!base) {
  base = event_global_current_base_;
  if (!event_global_current_base_)
   return -1;
 }

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 if (base->running_loop)
  update_time_cache(base);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return 0;
}

static inline struct event *
event_callback_to_event(struct event_callback *evcb)
{
 do { if (__builtin_expect(!!(!((evcb->evcb_flags & 0x80))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",496,"(evcb->evcb_flags & EVLIST_INIT)",__func__); (void)fprintf(
# 496 "event.c" 3 4
stderr
# 496 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",496,"(evcb->evcb_flags & EVLIST_INIT)",__func__); abort(); } } while (0);
 return ((struct event *)(((char*)(evcb)) - 
# 497 "event.c" 3 4
       __builtin_offsetof (
# 497 "event.c"
       struct event
# 497 "event.c" 3 4
       , 
# 497 "event.c"
       ev_evcallback
# 497 "event.c" 3 4
       )
# 497 "event.c"
       ));
}

static inline struct event_callback *
event_to_event_callback(struct event *ev)
{
 return &ev->ev_evcallback;
}

struct event_base *
event_init(void)
{
 struct event_base *base = event_base_new_with_config(
# 509 "event.c" 3 4
                                                     ((void *)0)
# 509 "event.c"
                                                         );

 if (base == 
# 511 "event.c" 3 4
            ((void *)0)
# 511 "event.c"
                ) {
  event_errx(1, "%s: Unable to construct event_base", __func__);
  return 
# 513 "event.c" 3 4
        ((void *)0)
# 513 "event.c"
            ;
 }

 event_global_current_base_ = base;

 return (base);
}

struct event_base *
event_base_new(void)
{
 struct event_base *base = 
# 524 "event.c" 3 4
                          ((void *)0)
# 524 "event.c"
                              ;
 struct event_config *cfg = event_config_new();
 if (cfg) {
  base = event_base_new_with_config(cfg);
  event_config_free(cfg);
 }
 return base;
}



static int
event_config_is_avoided_method(const struct event_config *cfg,
    const char *method)
{
 struct event_config_entry *entry;

 
# 541 "event.c" 3 4
for ((
# 541 "event.c"
entry
# 541 "event.c" 3 4
) = ((
# 541 "event.c"
&cfg->entries
# 541 "event.c" 3 4
)->tqh_first); (
# 541 "event.c"
entry
# 541 "event.c" 3 4
); (
# 541 "event.c"
entry
# 541 "event.c" 3 4
) = ((
# 541 "event.c"
entry
# 541 "event.c" 3 4
)->
# 541 "event.c"
next
# 541 "event.c" 3 4
.tqe_next)) 
# 541 "event.c"
                                          {
  if (entry->avoid_method != 
# 542 "event.c" 3 4
                            ((void *)0) 
# 542 "event.c"
                                 &&
      strcmp(entry->avoid_method, method) == 0)
   return (1);
 }

 return (0);
}


static int
event_is_method_disabled(const char *name)
{
 char environment[64];
 int i;

 evutil_snprintf(environment, sizeof(environment), "EVENT_NO%s", name);
 for (i = 8; environment[i] != '\0'; ++i)
  environment[i] = EVUTIL_TOUPPER_(environment[i]);


 return (evutil_getenv_(environment) != 
# 562 "event.c" 3 4
                                       ((void *)0)
# 562 "event.c"
                                           );
}

int
event_base_get_features(const struct event_base *base)
{
 return base->evsel->features;
}

void
event_enable_debug_mode(void)
{

 if (event_debug_mode_on_)
  event_errx(1, "%s was called twice!", __func__);
 if (event_debug_mode_too_late)
  event_errx(1, "%s must be called *before* creating any events "
      "or event_bases",__func__);

 event_debug_mode_on_ = 1;

 event_debug_map_HT_INIT(&global_debug_map);

}

void
event_disable_debug_mode(void)
{

 struct event_debug_entry **ent, *victim;

 do { if (event_debug_map_lock_) evthread_lock_fns_.lock(0, event_debug_map_lock_); } while (0);
 for (ent = event_debug_map_HT_START(&global_debug_map); ent; ) {
  victim = *ent;
  ent = event_debug_map_HT_NEXT_RMV((&global_debug_map), (ent));
  event_mm_free_(victim);
 }
 event_debug_map_HT_CLEAR(&global_debug_map);
 do { if (event_debug_map_lock_) evthread_lock_fns_.unlock(0, event_debug_map_lock_); } while (0);

 event_debug_mode_on_ = 0;

}

struct event_base *
event_base_new_with_config(const struct event_config *cfg)
{
 int i;
 struct event_base *base;
 int should_check_environment;


 event_debug_mode_too_late = 1;


 if ((base = event_mm_calloc_((1), (sizeof(struct event_base)))) == 
# 617 "event.c" 3 4
                                                        ((void *)0)
# 617 "event.c"
                                                            ) {
  event_warn("%s: calloc", __func__);
  return 
# 619 "event.c" 3 4
        ((void *)0)
# 619 "event.c"
            ;
 }

 if (cfg)
  base->flags = cfg->flags;







 should_check_environment =
     !(cfg && (cfg->flags & EVENT_BASE_FLAG_IGNORE_ENV));




 {
  struct timeval tmp;
  int precise_time =
      cfg && (cfg->flags & EVENT_BASE_FLAG_PRECISE_TIMER);
  int flags;
  if (should_check_environment && !precise_time) {
   precise_time = evutil_getenv_("EVENT_PRECISE_TIMER") != 
# 643 "event.c" 3 4
                                                          ((void *)0)
# 643 "event.c"
                                                              ;
   if (precise_time) {
    base->flags |= EVENT_BASE_FLAG_PRECISE_TIMER;
   }
  }
  flags = precise_time ? 1 : 0;
  evutil_configure_monotonic_time_(&base->monotonic_timer, flags);

  gettime(base, &tmp);
 }

 min_heap_ctor_(&base->timeheap);

 base->sig.ev_signal_pair[0] = -1;
 base->sig.ev_signal_pair[1] = -1;
 base->th_notify_fd[0] = -1;
 base->th_notify_fd[1] = -1;

 
# 661 "event.c" 3 4
do { (
# 661 "event.c"
&base->active_later_queue
# 661 "event.c" 3 4
)->tqh_first = ((void *)0); (
# 661 "event.c"
&base->active_later_queue
# 661 "event.c" 3 4
)->tqh_last = &(
# 661 "event.c"
&base->active_later_queue
# 661 "event.c" 3 4
)->tqh_first; } while ( 0)
# 661 "event.c"
                                     ;

 evmap_io_initmap_(&base->io);
 evmap_signal_initmap_(&base->sigmap);
 event_changelist_init_(&base->changelist);

 base->evbase = 
# 667 "event.c" 3 4
               ((void *)0)
# 667 "event.c"
                   ;

 if (cfg) {
  memcpy(&base->max_dispatch_time,
      &cfg->max_dispatch_interval, sizeof(struct timeval));
  base->limit_callbacks_after_prio =
      cfg->limit_callbacks_after_prio;
 } else {
  base->max_dispatch_time.tv_sec = -1;
  base->limit_callbacks_after_prio = 1;
 }

 if (cfg && cfg->max_dispatch_callbacks >= 0) {
  base->max_dispatch_callbacks = cfg->max_dispatch_callbacks;
 } else {
  base->max_dispatch_callbacks = 0x7fffffff;
 }



 if (base->max_dispatch_callbacks == 0x7fffffff
  && base->max_dispatch_time.tv_sec == -1)
 {
  base->limit_callbacks_after_prio = 0x7fffffff;
 }

 for (i = 0; eventops[i] && !base->evbase; i++) {
  if (cfg != 
# 694 "event.c" 3 4
            ((void *)0)
# 694 "event.c"
                ) {

   if (event_config_is_avoided_method(cfg, eventops[i]->name)) {


    continue;
   }
   if ((eventops[i]->features & cfg->require_features)
       != cfg->require_features)
   {
    continue;
   }
  }


  if (should_check_environment &&
      event_is_method_disabled(eventops[i]->name))
   continue;


  base->evsel = eventops[i];

  base->evbase = base->evsel->init(base);
 }

 if (base->evbase == 
# 719 "event.c" 3 4
                    ((void *)0)
# 719 "event.c"
                        ) {
  event_warnx("%s: no event mechanism available",
      __func__);
  base->evsel = 
# 722 "event.c" 3 4
               ((void *)0)
# 722 "event.c"
                   ;
  event_base_free(base);
  return 
# 724 "event.c" 3 4
        ((void *)0)
# 724 "event.c"
            ;
 }

 if (evutil_getenv_("EVENT_SHOW_METHOD"))
  event_msgx("libevent using: %s", base->evsel->name);


 if (event_base_priority_init(base, 1) < 0) {
  event_base_free(base);
  return 
# 733 "event.c" 3 4
        ((void *)0)
# 733 "event.c"
            ;
 }




 event_debug_created_threadable_ctx_ = 1;



 if ((evthread_lock_fns_.lock != 
# 743 "event.c" 3 4
    ((void *)0)
# 743 "event.c"
    ) &&
     (!cfg || !(cfg->flags & EVENT_BASE_FLAG_NOLOCK))) {
  int r;
  ((base->th_base_lock) = evthread_lock_fns_.alloc ? evthread_lock_fns_.alloc(0) : 
# 746 "event.c" 3 4
 ((void *)0)
# 746 "event.c"
 );
  do { (base->current_event_cond) = evthread_cond_fns_.alloc_condition ? evthread_cond_fns_.alloc_condition(0) : 
# 747 "event.c" 3 4
 ((void *)0)
# 747 "event.c"
 ; } while (0);
  r = evthread_make_base_notifiable(base);
  if (r<0) {
   event_warnx("%s: Unable to make base notifiable.", __func__);
   event_base_free(base);
   return 
# 752 "event.c" 3 4
         ((void *)0)
# 752 "event.c"
             ;
  }
 }







 return (base);
}

int
event_base_start_iocp_(struct event_base *base, int n_cpus)
{
# 778 "event.c"
 return -1;

}

void
event_base_stop_iocp_(struct event_base *base)
{
# 794 "event.c"
}

static int
event_base_cancel_single_callback_(struct event_base *base,
    struct event_callback *evcb,
    int run_finalizers)
{
 int result = 0;

 if (evcb->evcb_flags & 0x80) {
  struct event *ev = event_callback_to_event(evcb);
  if (!(ev->ev_evcallback.evcb_flags & 0x10)) {
   event_del_(ev, 3);
   result = 1;
  }
 } else {
  do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
  event_callback_cancel_nolock_(base, evcb, 1);
  do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
  result = 1;
 }

 if (run_finalizers && (evcb->evcb_flags & 0x40)) {
  switch (evcb->evcb_closure) {
  case 5:
  case 6: {
   struct event *ev = event_callback_to_event(evcb);
   ev->ev_evcallback.evcb_cb_union.evcb_evfinalize(ev, ev->ev_evcallback.evcb_arg);
   if (evcb->evcb_closure == 6)
    event_mm_free_(ev);
   break;
  }
  case 4:
   evcb->evcb_cb_union.evcb_cbfinalize(evcb, evcb->evcb_arg);
   break;
  default:
   break;
  }
 }
 return result;
}

static int event_base_free_queues_(struct event_base *base, int run_finalizers)
{
 int deleted = 0, i;

 for (i = 0; i < base->nactivequeues; ++i) {
  struct event_callback *evcb, *next;
  for (evcb = 
# 842 "event.c" 3 4
             ((
# 842 "event.c"
             &base->activequeues[i]
# 842 "event.c" 3 4
             )->tqh_first)
# 842 "event.c"
                                                ; evcb; ) {
   next = 
# 843 "event.c" 3 4
         ((
# 843 "event.c"
         evcb
# 843 "event.c" 3 4
         )->
# 843 "event.c"
         evcb_active_next
# 843 "event.c" 3 4
         .tqe_next)
# 843 "event.c"
                                           ;
   deleted += event_base_cancel_single_callback_(base, evcb, run_finalizers);
   evcb = next;
  }
 }

 {
  struct event_callback *evcb;
  while ((evcb = 
# 851 "event.c" 3 4
                ((
# 851 "event.c"
                &base->active_later_queue
# 851 "event.c" 3 4
                )->tqh_first)
# 851 "event.c"
                                                      )) {
   deleted += event_base_cancel_single_callback_(base, evcb, run_finalizers);
  }
 }

 return deleted;
}

static void
event_base_free_(struct event_base *base, int run_finalizers)
{
 int i, n_deleted=0;
 struct event *ev;





 if (base == 
# 869 "event.c" 3 4
            ((void *)0) 
# 869 "event.c"
                 && event_global_current_base_)
  base = event_global_current_base_;

 if (base == 
# 872 "event.c" 3 4
            ((void *)0)
# 872 "event.c"
                ) {
  event_warnx("%s: no base to free", __func__);
  return;
 }







 if (base->th_notify_fd[0] != -1) {
  event_del(&base->th_notify);
  evutil_closesocket(base->th_notify_fd[0]);
  if (base->th_notify_fd[1] != -1)
   evutil_closesocket(base->th_notify_fd[1]);
  base->th_notify_fd[0] = -1;
  base->th_notify_fd[1] = -1;
  event_debug_unassign(&base->th_notify);
 }


 evmap_delete_all_(base);

 while ((ev = min_heap_top_(&base->timeheap)) != 
# 896 "event.c" 3 4
                                                ((void *)0)
# 896 "event.c"
                                                    ) {
  event_del(ev);
  ++n_deleted;
 }
 for (i = 0; i < base->n_common_timeouts; ++i) {
  struct common_timeout_list *ctl =
      base->common_timeout_queues[i];
  event_del(&ctl->timeout_event);
  event_debug_unassign(&ctl->timeout_event);
  for (ev = 
# 905 "event.c" 3 4
           ((
# 905 "event.c"
           &ctl->events
# 905 "event.c" 3 4
           )->tqh_first)
# 905 "event.c"
                                    ; ev; ) {
   struct event *next = 
# 906 "event.c" 3 4
                       ((
# 906 "event.c"
                       ev
# 906 "event.c" 3 4
                       )->
# 906 "event.c"
                       ev_timeout_pos.ev_next_with_common_timeout
# 906 "event.c" 3 4
                       .tqe_next)
                                                  
# 907 "event.c"
                                                 ;
   if (!(ev->ev_evcallback.evcb_flags & 0x10)) {
    event_del(ev);
    ++n_deleted;
   }
   ev = next;
  }
  event_mm_free_(ctl);
 }
 if (base->common_timeout_queues)
  event_mm_free_(base->common_timeout_queues);

 for (;;) {
# 928 "event.c"
  int i = event_base_free_queues_(base, run_finalizers);
  do { if ((event_debug_logging_mask_)) { event_debugx_ ("%s: %d events freed", __func__, i); } } while (0);
  if (!i) {
   break;
  }
  n_deleted += i;
 }

 if (n_deleted)
  do { if ((event_debug_logging_mask_)) { event_debugx_ ("%s: %d events were still set in base", __func__, n_deleted); } } while (0)
                        ;

 while (
# 940 "event.c" 3 4
       ((
# 940 "event.c"
       &base->once_events
# 940 "event.c" 3 4
       )->lh_first)
# 940 "event.c"
                                     ) {
  struct event_once *eonce = 
# 941 "event.c" 3 4
                            ((
# 941 "event.c"
                            &base->once_events
# 941 "event.c" 3 4
                            )->lh_first)
# 941 "event.c"
                                                          ;
  
# 942 "event.c" 3 4
 do { if ((
# 942 "event.c"
 eonce
# 942 "event.c" 3 4
 )->
# 942 "event.c"
 next_once
# 942 "event.c" 3 4
 .le_next != ((void *)0)) (
# 942 "event.c"
 eonce
# 942 "event.c" 3 4
 )->
# 942 "event.c"
 next_once
# 942 "event.c" 3 4
 .le_next->
# 942 "event.c"
 next_once
# 942 "event.c" 3 4
 .le_prev = (
# 942 "event.c"
 eonce
# 942 "event.c" 3 4
 )->
# 942 "event.c"
 next_once
# 942 "event.c" 3 4
 .le_prev; *(
# 942 "event.c"
 eonce
# 942 "event.c" 3 4
 )->
# 942 "event.c"
 next_once
# 942 "event.c" 3 4
 .le_prev = (
# 942 "event.c"
 eonce
# 942 "event.c" 3 4
 )->
# 942 "event.c"
 next_once
# 942 "event.c" 3 4
 .le_next; } while ( 0)
# 942 "event.c"
                              ;
  event_mm_free_(eonce);
 }

 if (base->evsel != 
# 946 "event.c" 3 4
                   ((void *)0) 
# 946 "event.c"
                        && base->evsel->dealloc != 
# 946 "event.c" 3 4
                                                   ((void *)0)
# 946 "event.c"
                                                       )
  base->evsel->dealloc(base);

 for (i = 0; i < base->nactivequeues; ++i)
  do { if (__builtin_expect(!!(!(
# 950 "event.c" 3 4
 ((
# 950 "event.c"
 &base->activequeues[i]
# 950 "event.c" 3 4
 )->tqh_first == ((void *)0))
# 950 "event.c"
 )),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",950,"TAILQ_EMPTY(&base->activequeues[i])",__func__); (void)fprintf(
# 950 "event.c" 3 4
 stderr
# 950 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",950,"TAILQ_EMPTY(&base->activequeues[i])",__func__); abort(); } } while (0);

 do { if (__builtin_expect(!!(!(min_heap_empty_(&base->timeheap))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",952,"min_heap_empty_(&base->timeheap)",__func__); (void)fprintf(
# 952 "event.c" 3 4
stderr
# 952 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",952,"min_heap_empty_(&base->timeheap)",__func__); abort(); } } while (0);
 min_heap_dtor_(&base->timeheap);

 event_mm_free_(base->activequeues);

 evmap_io_clear_(&base->io);
 evmap_signal_clear_(&base->sigmap);
 event_changelist_freemem_(&base->changelist);

 do { void *lock_tmp_ = (base->th_base_lock); if (lock_tmp_ && evthread_lock_fns_.free) evthread_lock_fns_.free(lock_tmp_, (0)); } while (0);
 do { if (base->current_event_cond) evthread_cond_fns_.free_condition((base->current_event_cond)); } while (0);


 if (base == event_global_current_base_)
  event_global_current_base_ = 
# 966 "event.c" 3 4
                ((void *)0)
# 966 "event.c"
                    ;
 event_mm_free_(base);
}

void
event_base_free_nofinalize(struct event_base *base)
{
 event_base_free_(base, 0);
}

void
event_base_free(struct event_base *base)
{
 event_base_free_(base, 1);
}




static int
nil_backend_del(struct event_base *b, int fd, short old,
    short events, void *fdinfo)
{
 return 0;
}
const struct eventop nil_eventop = {
 "nil",
 
# 993 "event.c" 3 4
((void *)0)
# 993 "event.c"
    ,
 
# 994 "event.c" 3 4
((void *)0)
# 994 "event.c"
    ,
 nil_backend_del,
 
# 996 "event.c" 3 4
((void *)0)
# 996 "event.c"
    ,
 
# 997 "event.c" 3 4
((void *)0)
# 997 "event.c"
    ,
 0, 0, 0
};


int
event_reinit(struct event_base *base)
{
 const struct eventop *evsel;
 int res = 0;
 int was_notifiable = 0;
 int had_signal_added = 0;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);

 if (base->running_loop) {
  event_warnx("%s: forked from the event_loop.", __func__);
  res = -1;
  goto done;
 }

 evsel = base->evsel;


 if (evsel->need_reinit) {
# 1030 "event.c"
  base->evsel = &nil_eventop;
 }







 if (base->sig.ev_signal_added) {
  event_del_nolock_(&base->sig.ev_signal, 2);
  event_debug_unassign(&base->sig.ev_signal);
  memset(&base->sig.ev_signal, 0, sizeof(base->sig.ev_signal));
  had_signal_added = 1;
  base->sig.ev_signal_added = 0;
 }
 if (base->sig.ev_signal_pair[0] != -1)
  evutil_closesocket(base->sig.ev_signal_pair[0]);
 if (base->sig.ev_signal_pair[1] != -1)
  evutil_closesocket(base->sig.ev_signal_pair[1]);
 if (base->th_notify_fn != 
# 1050 "event.c" 3 4
                          ((void *)0)
# 1050 "event.c"
                              ) {
  was_notifiable = 1;
  base->th_notify_fn = 
# 1052 "event.c" 3 4
                      ((void *)0)
# 1052 "event.c"
                          ;
 }
 if (base->th_notify_fd[0] != -1) {
  event_del_nolock_(&base->th_notify, 2);
  evutil_closesocket(base->th_notify_fd[0]);
  if (base->th_notify_fd[1] != -1)
   evutil_closesocket(base->th_notify_fd[1]);
  base->th_notify_fd[0] = -1;
  base->th_notify_fd[1] = -1;
  event_debug_unassign(&base->th_notify);
 }


        base->evsel = evsel;

 if (evsel->need_reinit) {
# 1077 "event.c"
  if (base->evsel->dealloc != 
# 1077 "event.c" 3 4
                             ((void *)0)
# 1077 "event.c"
                                 )
   base->evsel->dealloc(base);
  base->evbase = evsel->init(base);
  if (base->evbase == 
# 1080 "event.c" 3 4
                     ((void *)0)
# 1080 "event.c"
                         ) {
   event_errx(1,
      "%s: could not reinitialize event mechanism",
      __func__);
   res = -1;
   goto done;
  }



  event_changelist_freemem_(&base->changelist);




  if (evmap_reinit_(base) < 0)
   res = -1;
 } else {
  res = evsig_init_(base);
  if (res == 0 && had_signal_added) {
   res = event_add_nolock_(&base->sig.ev_signal, 
# 1100 "event.c" 3 4
                                                ((void *)0)
# 1100 "event.c"
                                                    , 0);
   if (res == 0)
    base->sig.ev_signal_added = 1;
  }
 }



 if (was_notifiable && res == 0)
  res = evthread_make_base_notifiable_nolock_(base);

done:
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return (res);
}


int
event_gettime_monotonic(struct event_base *base, struct timeval *tv)
{
  int rv = -1;

  if (base && tv) {
    do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
    rv = evutil_gettime_monotonic_(&(base->monotonic_timer), tv);
    do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
  }

  return rv;
}

const char **
event_get_supported_methods(void)
{
 static const char **methods = 
# 1134 "event.c" 3 4
                              ((void *)0)
# 1134 "event.c"
                                  ;
 const struct eventop **method;
 const char **tmp;
 int i = 0, k;


 for (method = &eventops[0]; *method != 
# 1140 "event.c" 3 4
                                       ((void *)0)
# 1140 "event.c"
                                           ; ++method) {
  ++i;
 }


 tmp = event_mm_calloc_(((i + 1)), (sizeof(char *)));
 if (tmp == 
# 1146 "event.c" 3 4
           ((void *)0)
# 1146 "event.c"
               )
  return (
# 1147 "event.c" 3 4
         ((void *)0)
# 1147 "event.c"
             );


 for (k = 0, i = 0; eventops[k] != 
# 1150 "event.c" 3 4
                                  ((void *)0)
# 1150 "event.c"
                                      ; ++k) {
  tmp[i++] = eventops[k]->name;
 }
 tmp[i] = 
# 1153 "event.c" 3 4
         ((void *)0)
# 1153 "event.c"
             ;

 if (methods != 
# 1155 "event.c" 3 4
               ((void *)0)
# 1155 "event.c"
                   )
  event_mm_free_((char**)methods);

 methods = tmp;

 return (methods);
}

struct event_config *
event_config_new(void)
{
 struct event_config *cfg = event_mm_calloc_((1), (sizeof(*cfg)));

 if (cfg == 
# 1168 "event.c" 3 4
           ((void *)0)
# 1168 "event.c"
               )
  return (
# 1169 "event.c" 3 4
         ((void *)0)
# 1169 "event.c"
             );

 
# 1171 "event.c" 3 4
do { (
# 1171 "event.c"
&cfg->entries
# 1171 "event.c" 3 4
)->tqh_first = ((void *)0); (
# 1171 "event.c"
&cfg->entries
# 1171 "event.c" 3 4
)->tqh_last = &(
# 1171 "event.c"
&cfg->entries
# 1171 "event.c" 3 4
)->tqh_first; } while ( 0)
# 1171 "event.c"
                         ;
# 1180 "event.c"
 cfg->max_dispatch_interval.tv_sec = -1;
 cfg->max_dispatch_callbacks = 0x7fffffff;
 cfg->limit_callbacks_after_prio = 1;

 return (cfg);
}

static void
event_config_entry_free(struct event_config_entry *entry)
{
 if (entry->avoid_method != 
# 1190 "event.c" 3 4
                           ((void *)0)
# 1190 "event.c"
                               )
  event_mm_free_((char *)entry->avoid_method);
 event_mm_free_(entry);
}

void
event_config_free(struct event_config *cfg)
{
 struct event_config_entry *entry;

 while ((entry = 
# 1200 "event.c" 3 4
                ((
# 1200 "event.c"
                &cfg->entries
# 1200 "event.c" 3 4
                )->tqh_first)
# 1200 "event.c"
                                          ) != 
# 1200 "event.c" 3 4
                                               ((void *)0)
# 1200 "event.c"
                                                   ) {
  
# 1201 "event.c" 3 4
 do { if (((
# 1201 "event.c"
 entry
# 1201 "event.c" 3 4
 )->
# 1201 "event.c"
 next
# 1201 "event.c" 3 4
 .tqe_next) != ((void *)0)) (
# 1201 "event.c"
 entry
# 1201 "event.c" 3 4
 )->
# 1201 "event.c"
 next
# 1201 "event.c" 3 4
 .tqe_next->
# 1201 "event.c"
 next
# 1201 "event.c" 3 4
 .tqe_prev = (
# 1201 "event.c"
 entry
# 1201 "event.c" 3 4
 )->
# 1201 "event.c"
 next
# 1201 "event.c" 3 4
 .tqe_prev; else (
# 1201 "event.c"
 &cfg->entries
# 1201 "event.c" 3 4
 )->tqh_last = (
# 1201 "event.c"
 entry
# 1201 "event.c" 3 4
 )->
# 1201 "event.c"
 next
# 1201 "event.c" 3 4
 .tqe_prev; *(
# 1201 "event.c"
 entry
# 1201 "event.c" 3 4
 )->
# 1201 "event.c"
 next
# 1201 "event.c" 3 4
 .tqe_prev = (
# 1201 "event.c"
 entry
# 1201 "event.c" 3 4
 )->
# 1201 "event.c"
 next
# 1201 "event.c" 3 4
 .tqe_next; } while ( 0)
# 1201 "event.c"
                                         ;
  event_config_entry_free(entry);
 }
 event_mm_free_(cfg);
}

int
event_config_set_flag(struct event_config *cfg, int flag)
{
 if (!cfg)
  return -1;
 cfg->flags |= flag;
 return 0;
}

int
event_config_avoid_method(struct event_config *cfg, const char *method)
{
 struct event_config_entry *entry = event_mm_malloc_(sizeof(*entry));
 if (entry == 
# 1220 "event.c" 3 4
             ((void *)0)
# 1220 "event.c"
                 )
  return (-1);

 if ((entry->avoid_method = event_mm_strdup_(method)) == 
# 1223 "event.c" 3 4
                                                 ((void *)0)
# 1223 "event.c"
                                                     ) {
  event_mm_free_(entry);
  return (-1);
 }

 
# 1228 "event.c" 3 4
do { (
# 1228 "event.c"
entry
# 1228 "event.c" 3 4
)->
# 1228 "event.c"
next
# 1228 "event.c" 3 4
.tqe_next = ((void *)0); (
# 1228 "event.c"
entry
# 1228 "event.c" 3 4
)->
# 1228 "event.c"
next
# 1228 "event.c" 3 4
.tqe_prev = (
# 1228 "event.c"
&cfg->entries
# 1228 "event.c" 3 4
)->tqh_last; *(
# 1228 "event.c"
&cfg->entries
# 1228 "event.c" 3 4
)->tqh_last = (
# 1228 "event.c"
entry
# 1228 "event.c" 3 4
); (
# 1228 "event.c"
&cfg->entries
# 1228 "event.c" 3 4
)->tqh_last = &(
# 1228 "event.c"
entry
# 1228 "event.c" 3 4
)->
# 1228 "event.c"
next
# 1228 "event.c" 3 4
.tqe_next; } while ( 0)
# 1228 "event.c"
                                             ;
# 1238 "event.c"
 return (0);
}
# 1251 "event.c"
int
event_config_require_features(struct event_config *cfg,
    int features)
{
 if (!cfg)
  return (-1);
 cfg->require_features = features;
 return (0);
}

int
event_config_set_num_cpus_hint(struct event_config *cfg, int cpus)
{
 if (!cfg)
  return (-1);
 cfg->n_cpus_hint = cpus;
 return (0);
}

int
event_config_set_max_dispatch_interval(struct event_config *cfg,
    const struct timeval *max_interval, int max_callbacks, int min_priority)
{
 if (max_interval)
  memcpy(&cfg->max_dispatch_interval, max_interval,
      sizeof(struct timeval));
 else
  cfg->max_dispatch_interval.tv_sec = -1;
 cfg->max_dispatch_callbacks =
     max_callbacks >= 0 ? max_callbacks : 0x7fffffff;
 if (min_priority < 0)
  min_priority = 0;
 cfg->limit_callbacks_after_prio = min_priority;
 return (0);
}

int
event_priority_init(int npriorities)
{
 return event_base_priority_init(event_global_current_base_, npriorities);
}

int
event_base_priority_init(struct event_base *base, int npriorities)
{
 int i, r;
 r = -1;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);

 if (((base)->event_count_active) || npriorities < 1
     || npriorities >= 256)
  goto err;

 if (npriorities == base->nactivequeues)
  goto ok;

 if (base->nactivequeues) {
  event_mm_free_(base->activequeues);
  base->nactivequeues = 0;
 }


 base->activequeues = (struct evcallback_list *)
   event_mm_calloc_((npriorities), (sizeof(struct evcallback_list)));
 if (base->activequeues == 
# 1316 "event.c" 3 4
                          ((void *)0)
# 1316 "event.c"
                              ) {
  event_warn("%s: calloc", __func__);
  goto err;
 }
 base->nactivequeues = npriorities;

 for (i = 0; i < base->nactivequeues; ++i) {
  
# 1323 "event.c" 3 4
 do { (
# 1323 "event.c"
 &base->activequeues[i]
# 1323 "event.c" 3 4
 )->tqh_first = ((void *)0); (
# 1323 "event.c"
 &base->activequeues[i]
# 1323 "event.c" 3 4
 )->tqh_last = &(
# 1323 "event.c"
 &base->activequeues[i]
# 1323 "event.c" 3 4
 )->tqh_first; } while ( 0)
# 1323 "event.c"
                                   ;
 }

ok:
 r = 0;
err:
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return (r);
}

int
event_base_get_npriorities(struct event_base *base)
{

 int n;
 if (base == 
# 1338 "event.c" 3 4
            ((void *)0)
# 1338 "event.c"
                )
  base = event_global_current_base_;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 n = base->nactivequeues;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return (n);
}

int
event_base_get_num_events(struct event_base *base, unsigned int type)
{
 int r = 0;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);

 if (type & 1U)
  r += base->event_count_active;

 if (type & 2U)
  r += base->virtual_event_count;

 if (type & 4U)
  r += base->event_count;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);

 return r;
}

int
event_base_get_max_events(struct event_base *base, unsigned int type, int clear)
{
 int r = 0;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);

 if (type & 1U) {
  r += base->event_count_active_max;
  if (clear)
   base->event_count_active_max = 0;
 }

 if (type & 2U) {
  r += base->virtual_event_count_max;
  if (clear)
   base->virtual_event_count_max = 0;
 }

 if (type & 4U) {
  r += base->event_count_max;
  if (clear)
   base->event_count_max = 0;
 }

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);

 return r;
}


static int
event_haveevents(struct event_base *base)
{

 return (base->virtual_event_count > 0 || base->event_count > 0);
}


static inline void
event_signal_closure(struct event_base *base, struct event *ev)
{
 short ncalls;
 int should_break;


 ncalls = ev->ev_.ev_signal.ev_ncalls;
 if (ncalls != 0)
  ev->ev_.ev_signal.ev_pncalls = &ncalls;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 while (ncalls) {
  ncalls--;
  ev->ev_.ev_signal.ev_ncalls = ncalls;
  if (ncalls == 0)
   ev->ev_.ev_signal.ev_pncalls = 
# 1422 "event.c" 3 4
                   ((void *)0)
# 1422 "event.c"
                       ;
  (*ev->ev_evcallback.evcb_cb_union.evcb_callback)(ev->ev_fd, ev->ev_res, ev->ev_evcallback.evcb_arg);

  do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
  should_break = base->event_break;
  do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);

  if (should_break) {
   if (ncalls != 0)
    ev->ev_.ev_signal.ev_pncalls = 
# 1431 "event.c" 3 4
                    ((void *)0)
# 1431 "event.c"
                        ;
   return;
  }
 }
}
# 1461 "event.c"
static inline int
is_common_timeout(const struct timeval *tv,
    const struct event_base *base)
{
 int idx;
 if ((tv->tv_usec & 0xf0000000) != 0x50000000)
  return 0;
 idx = (((tv)->tv_usec & 0x0ff00000)>>20);
 return idx < base->n_common_timeouts;
}



static inline int
is_same_common_timeout(const struct timeval *tv1, const struct timeval *tv2)
{
 return (tv1->tv_usec & ~0x000fffff) ==
     (tv2->tv_usec & ~0x000fffff);
}



static inline struct common_timeout_list *
get_common_timeout_list(struct event_base *base, const struct timeval *tv)
{
 return base->common_timeout_queues[(((tv)->tv_usec & 0x0ff00000)>>20)];
}
# 1503 "event.c"
static void
common_timeout_schedule(struct common_timeout_list *ctl,
    const struct timeval *now, struct event *head)
{
 struct timeval timeout = head->ev_timeout;
 timeout.tv_usec &= 0x000fffff;
 event_add_nolock_(&ctl->timeout_event, &timeout, 1);
}




static void
common_timeout_callback(int fd, short what, void *arg)
{
 struct timeval now;
 struct common_timeout_list *ctl = arg;
 struct event_base *base = ctl->base;
 struct event *ev = 
# 1521 "event.c" 3 4
                   ((void *)0)
# 1521 "event.c"
                       ;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 gettime(base, &now);
 while (1) {
  ev = 
# 1525 "event.c" 3 4
      ((
# 1525 "event.c"
      &ctl->events
# 1525 "event.c" 3 4
      )->tqh_first)
# 1525 "event.c"
                               ;
  if (!ev || ev->ev_timeout.tv_sec > now.tv_sec ||
      (ev->ev_timeout.tv_sec == now.tv_sec &&
   (ev->ev_timeout.tv_usec&0x000fffff) > now.tv_usec))
   break;
  event_del_nolock_(ev, 0);
  event_active_nolock_(ev, 0x01, 1);
 }
 if (ev)
  common_timeout_schedule(ctl, &now, ev);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}



const struct timeval *
event_base_init_common_timeout(struct event_base *base,
    const struct timeval *duration)
{
 int i;
 struct timeval tv;
 const struct timeval *result=
# 1546 "event.c" 3 4
                             ((void *)0)
# 1546 "event.c"
                                 ;
 struct common_timeout_list *new_ctl;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 if (duration->tv_usec > 1000000) {
  memcpy(&tv, duration, sizeof(struct timeval));
  if (is_common_timeout(duration, base))
   tv.tv_usec &= 0x000fffff;
  tv.tv_sec += tv.tv_usec / 1000000;
  tv.tv_usec %= 1000000;
  duration = &tv;
 }
 for (i = 0; i < base->n_common_timeouts; ++i) {
  const struct common_timeout_list *ctl =
      base->common_timeout_queues[i];
  if (duration->tv_sec == ctl->duration.tv_sec &&
      duration->tv_usec ==
      (ctl->duration.tv_usec & 0x000fffff)) {
   do { if (__builtin_expect(!!(!(is_common_timeout(&ctl->duration, base))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1564,"is_common_timeout(&ctl->duration, base)",__func__); (void)fprintf(
# 1564 "event.c" 3 4
  stderr
# 1564 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1564,"is_common_timeout(&ctl->duration, base)",__func__); abort(); } } while (0);
   result = &ctl->duration;
   goto done;
  }
 }
 if (base->n_common_timeouts == 256) {
  event_warnx("%s: Too many common timeouts already in use; "
      "we only support %d per event_base", __func__,
      256);
  goto done;
 }
 if (base->n_common_timeouts_allocated == base->n_common_timeouts) {
  int n = base->n_common_timeouts < 16 ? 16 :
      base->n_common_timeouts*2;
  struct common_timeout_list **newqueues =
      event_mm_realloc_((base->common_timeout_queues), (n*sizeof(struct common_timeout_queue *)))
                                           ;
  if (!newqueues) {
   event_warn("%s: realloc",__func__);
   goto done;
  }
  base->n_common_timeouts_allocated = n;
  base->common_timeout_queues = newqueues;
 }
 new_ctl = event_mm_calloc_((1), (sizeof(struct common_timeout_list)));
 if (!new_ctl) {
  event_warn("%s: calloc",__func__);
  goto done;
 }
 
# 1593 "event.c" 3 4
do { (
# 1593 "event.c"
&new_ctl->events
# 1593 "event.c" 3 4
)->tqh_first = ((void *)0); (
# 1593 "event.c"
&new_ctl->events
# 1593 "event.c" 3 4
)->tqh_last = &(
# 1593 "event.c"
&new_ctl->events
# 1593 "event.c" 3 4
)->tqh_first; } while ( 0)
# 1593 "event.c"
                            ;
 new_ctl->duration.tv_sec = duration->tv_sec;
 new_ctl->duration.tv_usec =
     duration->tv_usec | 0x50000000 |
     (base->n_common_timeouts << 20);
 event_assign((&new_ctl->timeout_event), (base), -1, 0, (common_timeout_callback), (new_ctl))
                                      ;
 new_ctl->timeout_event.ev_evcallback.evcb_flags |= 0x10;
 event_priority_set(&new_ctl->timeout_event, 0);
 new_ctl->base = base;
 base->common_timeout_queues[base->n_common_timeouts++] = new_ctl;
 result = &new_ctl->duration;

done:
 if (result)
  do { if (__builtin_expect(!!(!(is_common_timeout(result, base))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1608,"is_common_timeout(result, base)",__func__); (void)fprintf(
# 1608 "event.c" 3 4
 stderr
# 1608 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",1608,"is_common_timeout(result, base)",__func__); abort(); } } while (0);

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return result;
}


static inline void
event_persist_closure(struct event_base *base, struct event *ev)
{
 void (*evcb_callback)(int, short, void *);


        int evcb_fd;
        short evcb_res;
        void *evcb_arg;


 if (ev->ev_.ev_io.ev_timeout.tv_sec || ev->ev_.ev_io.ev_timeout.tv_usec) {




  struct timeval run_at, relative_to, delay, now;
  uint32_t usec_mask = 0;
  do { if (__builtin_expect(!!(!(is_same_common_timeout(&ev->ev_timeout, &ev->ev_.ev_io.ev_timeout))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s",
                      "event.c"
# 1633 "event.c"
  ,
                      1634
# 1633 "event.c"
  ,"is_same_common_timeout(&ev->ev_timeout, &ev->ev_io_timeout)",__func__); (void)fprintf(
# 1633 "event.c" 3 4
 stderr
# 1633 "event.c"
 , "%s:%d: Assertion %s failed in %s",
                      "event.c"
# 1633 "event.c"
  ,
                      1634
# 1633 "event.c"
  ,"is_same_common_timeout(&ev->ev_timeout, &ev->ev_io_timeout)",__func__); abort(); } } while (0)
                       ;
  gettime(base, &now);
  if (is_common_timeout(&ev->ev_timeout, base)) {
   delay = ev->ev_.ev_io.ev_timeout;
   usec_mask = delay.tv_usec & ~0x000fffff;
   delay.tv_usec &= 0x000fffff;
   if (ev->ev_res & 0x01) {
    relative_to = ev->ev_timeout;
    relative_to.tv_usec &= 0x000fffff;
   } else {
    relative_to = now;
   }
  } else {
   delay = ev->ev_.ev_io.ev_timeout;
   if (ev->ev_res & 0x01) {
    relative_to = ev->ev_timeout;
   } else {
    relative_to = now;
   }
  }
  
# 1654 "event.c" 3 4
 do { (
# 1654 "event.c"
 (&run_at)
# 1654 "event.c" 3 4
 )->tv_sec = (
# 1654 "event.c"
 (&relative_to)
# 1654 "event.c" 3 4
 )->tv_sec + (
# 1654 "event.c"
 (&delay)
# 1654 "event.c" 3 4
 )->tv_sec; (
# 1654 "event.c"
 (&run_at)
# 1654 "event.c" 3 4
 )->tv_usec = (
# 1654 "event.c"
 (&relative_to)
# 1654 "event.c" 3 4
 )->tv_usec + (
# 1654 "event.c"
 (&delay)
# 1654 "event.c" 3 4
 )->tv_usec; if ((
# 1654 "event.c"
 (&run_at)
# 1654 "event.c" 3 4
 )->tv_usec >= 1000000) { ++(
# 1654 "event.c"
 (&run_at)
# 1654 "event.c" 3 4
 )->tv_sec; (
# 1654 "event.c"
 (&run_at)
# 1654 "event.c" 3 4
 )->tv_usec -= 1000000; } } while (0)
# 1654 "event.c"
                                               ;
  if ((((&run_at)->tv_sec == (&now)->tv_sec) ? ((&run_at)->tv_usec < (&now)->tv_usec) : ((&run_at)->tv_sec < (&now)->tv_sec))) {





   
# 1661 "event.c" 3 4
  do { (
# 1661 "event.c"
  (&run_at)
# 1661 "event.c" 3 4
  )->tv_sec = (
# 1661 "event.c"
  (&now)
# 1661 "event.c" 3 4
  )->tv_sec + (
# 1661 "event.c"
  (&delay)
# 1661 "event.c" 3 4
  )->tv_sec; (
# 1661 "event.c"
  (&run_at)
# 1661 "event.c" 3 4
  )->tv_usec = (
# 1661 "event.c"
  (&now)
# 1661 "event.c" 3 4
  )->tv_usec + (
# 1661 "event.c"
  (&delay)
# 1661 "event.c" 3 4
  )->tv_usec; if ((
# 1661 "event.c"
  (&run_at)
# 1661 "event.c" 3 4
  )->tv_usec >= 1000000) { ++(
# 1661 "event.c"
  (&run_at)
# 1661 "event.c" 3 4
  )->tv_sec; (
# 1661 "event.c"
  (&run_at)
# 1661 "event.c" 3 4
  )->tv_usec -= 1000000; } } while (0)
# 1661 "event.c"
                                        ;
  }
  run_at.tv_usec |= usec_mask;
  event_add_nolock_(ev, &run_at, 1);
 }


 evcb_callback = ev->ev_evcallback.evcb_cb_union.evcb_callback;
        evcb_fd = ev->ev_fd;
        evcb_res = ev->ev_res;
        evcb_arg = ev->ev_evcallback.evcb_arg;


  do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);


        (evcb_callback)(evcb_fd, evcb_res, evcb_arg);
}
# 1687 "event.c"
static int
event_process_active_single_queue(struct event_base *base,
    struct evcallback_list *activeq,
    int max_to_process, const struct timeval *endtime)
{
 struct event_callback *evcb;
 int count = 0;

 do { if (__builtin_expect(!!(!(activeq != 
# 1695 "event.c" 3 4
((void *)0)
# 1695 "event.c"
)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1695,"activeq != NULL",__func__); (void)fprintf(
# 1695 "event.c" 3 4
stderr
# 1695 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",1695,"activeq != NULL",__func__); abort(); } } while (0);

 for (evcb = 
# 1697 "event.c" 3 4
            ((
# 1697 "event.c"
            activeq
# 1697 "event.c" 3 4
            )->tqh_first)
# 1697 "event.c"
                                ; evcb; evcb = 
# 1697 "event.c" 3 4
                                               ((
# 1697 "event.c"
                                               activeq
# 1697 "event.c" 3 4
                                               )->tqh_first)
# 1697 "event.c"
                                                                   ) {
  struct event *ev=
# 1698 "event.c" 3 4
                  ((void *)0)
# 1698 "event.c"
                      ;
  if (evcb->evcb_flags & 0x80) {
   ev = event_callback_to_event(evcb);

   if (ev->ev_events & 0x10 || ev->ev_evcallback.evcb_flags & 0x40)
    event_queue_remove_active(base, evcb);
   else
    event_del_nolock_(ev, 0);
   do { if ((event_debug_logging_mask_)) { event_debugx_ ( "event_process_active: event: %p, %s%s%scall %p", ev, ev->ev_res & 0x02 ? "EV_READ " : " ", ev->ev_res & 0x04 ? "EV_WRITE " : " ", ev->ev_res & 0x80 ? "EV_CLOSED " : " ", ev->ev_evcallback.evcb_cb_union.evcb_callback); } } while (0)





                        ;
  } else {
   event_queue_remove_active(base, evcb);
   do { if ((event_debug_logging_mask_)) { event_debugx_ ("event_process_active: event_callback %p, " "closure %d, call %p", evcb, evcb->evcb_closure, evcb->evcb_cb_union.evcb_callback); } } while (0)

                                                                 ;
  }

  if (!(evcb->evcb_flags & 0x10))
   ++count;


  base->current_event = evcb;

  base->current_event_waiters = 0;


  switch (evcb->evcb_closure) {
  case 1:
   do { if (__builtin_expect(!!(!(ev != 
# 1731 "event.c" 3 4
  ((void *)0)
# 1731 "event.c"
  )),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1731,"ev != NULL",__func__); (void)fprintf(
# 1731 "event.c" 3 4
  stderr
# 1731 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1731,"ev != NULL",__func__); abort(); } } while (0);
   event_signal_closure(base, ev);
   break;
  case 2:
   do { if (__builtin_expect(!!(!(ev != 
# 1735 "event.c" 3 4
  ((void *)0)
# 1735 "event.c"
  )),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1735,"ev != NULL",__func__); (void)fprintf(
# 1735 "event.c" 3 4
  stderr
# 1735 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1735,"ev != NULL",__func__); abort(); } } while (0);
   event_persist_closure(base, ev);
   break;
  case 0: {
   void (*evcb_callback)(int, short, void *);
   short res;
   do { if (__builtin_expect(!!(!(ev != 
# 1741 "event.c" 3 4
  ((void *)0)
# 1741 "event.c"
  )),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1741,"ev != NULL",__func__); (void)fprintf(
# 1741 "event.c" 3 4
  stderr
# 1741 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1741,"ev != NULL",__func__); abort(); } } while (0);
   evcb_callback = *ev->ev_evcallback.evcb_cb_union.evcb_callback;
   res = ev->ev_res;
   do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
   evcb_callback(ev->ev_fd, res, ev->ev_evcallback.evcb_arg);
  }
  break;
  case 3: {
   void (*evcb_selfcb)(struct event_callback *, void *) = evcb->evcb_cb_union.evcb_selfcb;
   do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
   evcb_selfcb(evcb, evcb->evcb_arg);
  }
  break;
  case 5:
  case 6: {
   void (*evcb_evfinalize)(struct event *, void *);
   int evcb_closure = evcb->evcb_closure;
   do { if (__builtin_expect(!!(!(ev != 
# 1758 "event.c" 3 4
  ((void *)0)
# 1758 "event.c"
  )),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1758,"ev != NULL",__func__); (void)fprintf(
# 1758 "event.c" 3 4
  stderr
# 1758 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1758,"ev != NULL",__func__); abort(); } } while (0);
   base->current_event = 
# 1759 "event.c" 3 4
                        ((void *)0)
# 1759 "event.c"
                            ;
   evcb_evfinalize = ev->ev_evcallback.evcb_cb_union.evcb_evfinalize;
   do { if (__builtin_expect(!!(!((evcb->evcb_flags & 0x40))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1761,"(evcb->evcb_flags & EVLIST_FINALIZING)",__func__); (void)fprintf(
# 1761 "event.c" 3 4
  stderr
# 1761 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1761,"(evcb->evcb_flags & EVLIST_FINALIZING)",__func__); abort(); } } while (0);
   do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
   evcb_evfinalize(ev, ev->ev_evcallback.evcb_arg);
   event_debug_note_teardown_(ev);
   if (evcb_closure == 6)
    event_mm_free_(ev);
  }
  break;
  case 4: {
   void (*evcb_cbfinalize)(struct event_callback *, void *) = evcb->evcb_cb_union.evcb_cbfinalize;
   base->current_event = 
# 1771 "event.c" 3 4
                        ((void *)0)
# 1771 "event.c"
                            ;
   do { if (__builtin_expect(!!(!((evcb->evcb_flags & 0x40))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1772,"(evcb->evcb_flags & EVLIST_FINALIZING)",__func__); (void)fprintf(
# 1772 "event.c" 3 4
  stderr
# 1772 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1772,"(evcb->evcb_flags & EVLIST_FINALIZING)",__func__); abort(); } } while (0);
   do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
   evcb_cbfinalize(evcb, evcb->evcb_arg);
  }
  break;
  default:
   do { if (__builtin_expect(!!(!(0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1778,"0",__func__); (void)fprintf(
# 1778 "event.c" 3 4
  stderr
# 1778 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",1778,"0",__func__); abort(); } } while (0);
  }

  do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
  base->current_event = 
# 1782 "event.c" 3 4
                       ((void *)0)
# 1782 "event.c"
                           ;

  if (base->current_event_waiters) {
   base->current_event_waiters = 0;
   ( (base->current_event_cond) ? evthread_cond_fns_.signal_condition((base->current_event_cond), 1) : 0 );
  }


  if (base->event_break)
   return -1;
  if (count >= max_to_process)
   return count;
  if (count && endtime) {
   struct timeval now;
   update_time_cache(base);
   gettime(base, &now);
   if ((((&now)->tv_sec == (endtime)->tv_sec) ? ((&now)->tv_usec >= (endtime)->tv_usec) : ((&now)->tv_sec >= (endtime)->tv_sec)))
    return count;
  }
  if (base->event_continue)
   break;
 }
 return count;
}







static int
event_process_active(struct event_base *base)
{

 struct evcallback_list *activeq = 
# 1817 "event.c" 3 4
                                  ((void *)0)
# 1817 "event.c"
                                      ;
 int i, c = 0;
 const struct timeval *endtime;
 struct timeval tv;
 const int maxcb = base->max_dispatch_callbacks;
 const int limit_after_prio = base->limit_callbacks_after_prio;
 if (base->max_dispatch_time.tv_sec >= 0) {
  update_time_cache(base);
  gettime(base, &tv);
  
# 1826 "event.c" 3 4
 do { (
# 1826 "event.c"
 (&tv)
# 1826 "event.c" 3 4
 )->tv_sec = (
# 1826 "event.c"
 (&base->max_dispatch_time)
# 1826 "event.c" 3 4
 )->tv_sec + (
# 1826 "event.c"
 (&tv)
# 1826 "event.c" 3 4
 )->tv_sec; (
# 1826 "event.c"
 (&tv)
# 1826 "event.c" 3 4
 )->tv_usec = (
# 1826 "event.c"
 (&base->max_dispatch_time)
# 1826 "event.c" 3 4
 )->tv_usec + (
# 1826 "event.c"
 (&tv)
# 1826 "event.c" 3 4
 )->tv_usec; if ((
# 1826 "event.c"
 (&tv)
# 1826 "event.c" 3 4
 )->tv_usec >= 1000000) { ++(
# 1826 "event.c"
 (&tv)
# 1826 "event.c" 3 4
 )->tv_sec; (
# 1826 "event.c"
 (&tv)
# 1826 "event.c" 3 4
 )->tv_usec -= 1000000; } } while (0)
# 1826 "event.c"
                                                    ;
  endtime = &tv;
 } else {
  endtime = 
# 1829 "event.c" 3 4
           ((void *)0)
# 1829 "event.c"
               ;
 }

 for (i = 0; i < base->nactivequeues; ++i) {
  if (
# 1833 "event.c" 3 4
     ((
# 1833 "event.c"
     &base->activequeues[i]
# 1833 "event.c" 3 4
     )->tqh_first) 
# 1833 "event.c"
                                         != 
# 1833 "event.c" 3 4
                                            ((void *)0)
# 1833 "event.c"
                                                ) {
   base->event_running_priority = i;
   activeq = &base->activequeues[i];
   if (i < limit_after_prio)
    c = event_process_active_single_queue(base, activeq,
        0x7fffffff, 
# 1838 "event.c" 3 4
                ((void *)0)
# 1838 "event.c"
                    );
   else
    c = event_process_active_single_queue(base, activeq,
        maxcb, endtime);
   if (c < 0) {
    goto done;
   } else if (c > 0)
    break;



  }
 }

done:
 base->event_running_priority = -1;

 return c;
}





int
event_dispatch(void)
{
 return (event_loop(0));
}

int
event_base_dispatch(struct event_base *event_base)
{
 return (event_base_loop(event_base, 0));
}

const char *
event_base_get_method(const struct event_base *base)
{
 do { if (__builtin_expect(!!(!(base)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",1877,"base",__func__); (void)fprintf(
# 1877 "event.c" 3 4
stderr
# 1877 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",1877,"base",__func__); abort(); } } while (0);
 return (base->evsel->name);
}



static void
event_loopexit_cb(int fd, short what, void *arg)
{
 struct event_base *base = arg;
 base->event_gotterm = 1;
}

int
event_loopexit(const struct timeval *tv)
{
 return (event_once(-1, 0x01, event_loopexit_cb,
      event_global_current_base_, tv));
}

int
event_base_loopexit(struct event_base *event_base, const struct timeval *tv)
{
 return (event_base_once(event_base, -1, 0x01, event_loopexit_cb,
      event_base, tv));
}

int
event_loopbreak(void)
{
 return (event_base_loopbreak(event_global_current_base_));
}

int
event_base_loopbreak(struct event_base *event_base)
{
 int r = 0;
 if (event_base == 
# 1914 "event.c" 3 4
                  ((void *)0)
# 1914 "event.c"
                      )
  return (-1);

 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.lock(0, (event_base)->th_base_lock); } while (0); } while (0);
 event_base->event_break = 1;

 if ((evthread_id_fn_ != 
# 1920 "event.c" 3 4
    ((void *)0) 
# 1920 "event.c"
    && (event_base)->running_loop && (event_base)->th_owner_id != evthread_id_fn_())) {
  r = evthread_notify_base(event_base);
 } else {
  r = (0);
 }
 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.unlock(0, (event_base)->th_base_lock); } while (0); } while (0);
 return r;
}

int
event_base_loopcontinue(struct event_base *event_base)
{
 int r = 0;
 if (event_base == 
# 1933 "event.c" 3 4
                  ((void *)0)
# 1933 "event.c"
                      )
  return (-1);

 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.lock(0, (event_base)->th_base_lock); } while (0); } while (0);
 event_base->event_continue = 1;

 if ((evthread_id_fn_ != 
# 1939 "event.c" 3 4
    ((void *)0) 
# 1939 "event.c"
    && (event_base)->running_loop && (event_base)->th_owner_id != evthread_id_fn_())) {
  r = evthread_notify_base(event_base);
 } else {
  r = (0);
 }
 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.unlock(0, (event_base)->th_base_lock); } while (0); } while (0);
 return r;
}

int
event_base_got_break(struct event_base *event_base)
{
 int res;
 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.lock(0, (event_base)->th_base_lock); } while (0); } while (0);
 res = event_base->event_break;
 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.unlock(0, (event_base)->th_base_lock); } while (0); } while (0);
 return res;
}

int
event_base_got_exit(struct event_base *event_base)
{
 int res;
 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.lock(0, (event_base)->th_base_lock); } while (0); } while (0);
 res = event_base->event_gotterm;
 do { do { if ((event_base)->th_base_lock) evthread_lock_fns_.unlock(0, (event_base)->th_base_lock); } while (0); } while (0);
 return res;
}



int
event_loop(int flags)
{
 return event_base_loop(event_global_current_base_, flags);
}

int
event_base_loop(struct event_base *base, int flags)
{
 const struct eventop *evsel = base->evsel;
 struct timeval tv;
 struct timeval *tv_p;
 int res, done, retval = 0;



 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);

 if (base->running_loop) {
  event_warnx("%s: reentrant invocation.  Only one event_base_loop"
      " can run on each event_base at once.", __func__);
  do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
  return -1;
 }

 base->running_loop = 1;

 clear_time_cache(base);

 if (base->sig.ev_signal_added && base->sig.ev_n_signals_added)
  evsig_set_base_(base);

 done = 0;


 base->th_owner_id = (evthread_id_fn_ ? evthread_id_fn_() : 1);


 base->event_gotterm = base->event_break = 0;

 while (!done) {
  base->event_continue = 0;
  base->n_deferreds_queued = 0;


  if (base->event_gotterm) {
   break;
  }

  if (base->event_break) {
   break;
  }

  tv_p = &tv;
  if (!((base)->event_count_active) && !(flags & 0x02)) {
   timeout_next(base, &tv_p);
  } else {




   
# 2031 "event.c" 3 4
  ((
# 2031 "event.c"
  &tv
# 2031 "event.c" 3 4
  )->tv_sec = (
# 2031 "event.c"
  &tv
# 2031 "event.c" 3 4
  )->tv_usec = 0)
# 2031 "event.c"
                        ;
  }


  if (0==(flags&0x04) &&
      !event_haveevents(base) && !((base)->event_count_active)) {
   do { if ((event_debug_logging_mask_)) { event_debugx_ ("%s: no events registered.", __func__); } } while (0);
   retval = 1;
   goto done;
  }

  event_queue_make_later_events_active(base);

  clear_time_cache(base);

  res = evsel->dispatch(base, tv_p);

  if (res == -1) {
   do { if ((event_debug_logging_mask_)) { event_debugx_ ("%s: dispatch returned unsuccessfully.", __func__); } } while (0)
              ;
   retval = -1;
   goto done;
  }

  update_time_cache(base);

  timeout_process(base);

  if (((base)->event_count_active)) {
   int n = event_process_active(base);
   if ((flags & 0x01)
       && ((base)->event_count_active) == 0
       && n != 0)
    done = 1;
  } else if (flags & 0x02)
   done = 1;
 }
 do { if ((event_debug_logging_mask_)) { event_debugx_ ("%s: asked to terminate loop.", __func__); } } while (0);

done:
 clear_time_cache(base);
 base->running_loop = 0;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);

 return (retval);
}



static void
event_once_cb(int fd, short events, void *arg)
{
 struct event_once *eonce = arg;

 (*eonce->cb)(fd, events, eonce->arg);
 do { do { if ((eonce->ev.ev_base)->th_base_lock) evthread_lock_fns_.lock(0, (eonce->ev.ev_base)->th_base_lock); } while (0); } while (0);
 
# 2088 "event.c" 3 4
do { if ((
# 2088 "event.c"
eonce
# 2088 "event.c" 3 4
)->
# 2088 "event.c"
next_once
# 2088 "event.c" 3 4
.le_next != ((void *)0)) (
# 2088 "event.c"
eonce
# 2088 "event.c" 3 4
)->
# 2088 "event.c"
next_once
# 2088 "event.c" 3 4
.le_next->
# 2088 "event.c"
next_once
# 2088 "event.c" 3 4
.le_prev = (
# 2088 "event.c"
eonce
# 2088 "event.c" 3 4
)->
# 2088 "event.c"
next_once
# 2088 "event.c" 3 4
.le_prev; *(
# 2088 "event.c"
eonce
# 2088 "event.c" 3 4
)->
# 2088 "event.c"
next_once
# 2088 "event.c" 3 4
.le_prev = (
# 2088 "event.c"
eonce
# 2088 "event.c" 3 4
)->
# 2088 "event.c"
next_once
# 2088 "event.c" 3 4
.le_next; } while ( 0)
# 2088 "event.c"
                             ;
 do { do { if ((eonce->ev.ev_base)->th_base_lock) evthread_lock_fns_.unlock(0, (eonce->ev.ev_base)->th_base_lock); } while (0); } while (0);
 event_debug_unassign(&eonce->ev);
 event_mm_free_(eonce);
}


int
event_once(int fd, short events,
    void (*callback)(int, short, void *),
    void *arg, const struct timeval *tv)
{
 return event_base_once(event_global_current_base_, fd, events, callback, arg, tv);
}


int
event_base_once(struct event_base *base, int fd, short events,
    void (*callback)(int, short, void *),
    void *arg, const struct timeval *tv)
{
 struct event_once *eonce;
 int res = 0;
 int activate = 0;



 if (events & (0x08|0x10))
  return (-1);

 if ((eonce = event_mm_calloc_((1), (sizeof(struct event_once)))) == 
# 2118 "event.c" 3 4
                                                         ((void *)0)
# 2118 "event.c"
                                                             )
  return (-1);

 eonce->cb = callback;
 eonce->arg = arg;

 if ((events & (0x01|0x08|0x02|0x04|0x80)) == 0x01) {
  event_assign((&eonce->ev), (base), -1, 0, (event_once_cb), (eonce));

  if (tv == 
# 2127 "event.c" 3 4
           ((void *)0) 
# 2127 "event.c"
                || ! 
# 2127 "event.c" 3 4
                     ((
# 2127 "event.c"
                     tv
# 2127 "event.c" 3 4
                     )->tv_sec || (
# 2127 "event.c"
                     tv
# 2127 "event.c" 3 4
                     )->tv_usec)
# 2127 "event.c"
                                          ) {




   activate = 1;
  }
 } else if (events & (0x02|0x04|0x80)) {
  events &= 0x02|0x04|0x80;

  event_assign(&eonce->ev, base, fd, events, event_once_cb, eonce);
 } else {

  event_mm_free_(eonce);
  return (-1);
 }

 if (res == 0) {
  do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
  if (activate)
   event_active_nolock_(&eonce->ev, 0x01, 1);
  else
   res = event_add_nolock_(&eonce->ev, tv, 0);

  if (res != 0) {
   event_mm_free_(eonce);
   return (res);
  } else {
   
# 2155 "event.c" 3 4
  do { if (((
# 2155 "event.c"
  eonce
# 2155 "event.c" 3 4
  )->
# 2155 "event.c"
  next_once
# 2155 "event.c" 3 4
  .le_next = (
# 2155 "event.c"
  &base->once_events
# 2155 "event.c" 3 4
  )->lh_first) != ((void *)0)) (
# 2155 "event.c"
  &base->once_events
# 2155 "event.c" 3 4
  )->lh_first->
# 2155 "event.c"
  next_once
# 2155 "event.c" 3 4
  .le_prev = &(
# 2155 "event.c"
  eonce
# 2155 "event.c" 3 4
  )->
# 2155 "event.c"
  next_once
# 2155 "event.c" 3 4
  .le_next; (
# 2155 "event.c"
  &base->once_events
# 2155 "event.c" 3 4
  )->lh_first = (
# 2155 "event.c"
  eonce
# 2155 "event.c" 3 4
  ); (
# 2155 "event.c"
  eonce
# 2155 "event.c" 3 4
  )->
# 2155 "event.c"
  next_once
# 2155 "event.c" 3 4
  .le_prev = &(
# 2155 "event.c"
  &base->once_events
# 2155 "event.c" 3 4
  )->lh_first; } while ( 0)
# 2155 "event.c"
                                                        ;
  }
  do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 }

 return (0);
}






int
event_assign(struct event *ev, struct event_base *base, int fd, short events, void (*callback)(int, short, void *), void *arg)
{
 if (!base)
  base = event_global_current_base_;
 if (arg == &event_self_cbarg_ptr_)
  arg = ev;

 if (!(events & 0x08))
  event_debug_assert_socket_nonblocking_(fd);
 event_debug_assert_not_added_(ev);

 ev->ev_base = base;

 ev->ev_evcallback.evcb_cb_union.evcb_callback = callback;
 ev->ev_evcallback.evcb_arg = arg;
 ev->ev_fd = fd;
 ev->ev_events = events;
 ev->ev_res = 0;
 ev->ev_evcallback.evcb_flags = 0x80;
 ev->ev_.ev_signal.ev_ncalls = 0;
 ev->ev_.ev_signal.ev_pncalls = 
# 2189 "event.c" 3 4
                 ((void *)0)
# 2189 "event.c"
                     ;


 if (events & 0x08) {
  if ((events & (0x02|0x04|0x80)) != 0) {
   event_warnx("%s: EV_SIGNAL is not compatible with "
       "EV_READ, EV_WRITE or EV_CLOSED", __func__);
   return -1;
  }
  ev->ev_evcallback.evcb_closure = 1;
 } else {
  if (events & 0x10) {
   
# 2201 "event.c" 3 4
  ((
# 2201 "event.c"
  &ev->ev_.ev_io.ev_timeout
# 2201 "event.c" 3 4
  )->tv_sec = (
# 2201 "event.c"
  &ev->ev_.ev_io.ev_timeout
# 2201 "event.c" 3 4
  )->tv_usec = 0)
# 2201 "event.c"
                                       ;
   ev->ev_evcallback.evcb_closure = 2;
  } else {
   ev->ev_evcallback.evcb_closure = 0;
  }
 }

 min_heap_elem_init_(ev);

 if (base != 
# 2210 "event.c" 3 4
            ((void *)0)
# 2210 "event.c"
                ) {

  ev->ev_evcallback.evcb_pri = base->nactivequeues / 2;
 }

 event_debug_note_setup_(ev);

 return 0;
}

int
event_base_set(struct event_base *base, struct event *ev)
{

 if (ev->ev_evcallback.evcb_flags != 0x80)
  return (-1);

 event_debug_assert_is_setup_(ev);

 ev->ev_base = base;
 ev->ev_evcallback.evcb_pri = base->nactivequeues/2;

 return (0);
}

void
event_set(struct event *ev, int fd, short events,
   void (*callback)(int, short, void *), void *arg)
{
 int r;
 r = event_assign(ev, event_global_current_base_, fd, events, callback, arg);
 do { if (__builtin_expect(!!(!(r == 0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2241,"r == 0",__func__); (void)fprintf(
# 2241 "event.c" 3 4
stderr
# 2241 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2241,"r == 0",__func__); abort(); } } while (0);
}

void *
event_self_cbarg(void)
{
 return &event_self_cbarg_ptr_;
}

struct event *
event_base_get_running_event(struct event_base *base)
{
 struct event *ev = 
# 2253 "event.c" 3 4
                   ((void *)0)
# 2253 "event.c"
                       ;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 if ((evthread_id_fn_ == 
# 2255 "event.c" 3 4
    ((void *)0) 
# 2255 "event.c"
    || (base)->th_owner_id == evthread_id_fn_())) {
  struct event_callback *evcb = base->current_event;
  if (evcb->evcb_flags & 0x80)
   ev = event_callback_to_event(evcb);
 }
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return ev;
}

struct event *
event_new(struct event_base *base, int fd, short events, void (*cb)(int, short, void *), void *arg)
{
 struct event *ev;
 ev = event_mm_malloc_(sizeof(struct event));
 if (ev == 
# 2269 "event.c" 3 4
          ((void *)0)
# 2269 "event.c"
              )
  return (
# 2270 "event.c" 3 4
         ((void *)0)
# 2270 "event.c"
             );
 if (event_assign(ev, base, fd, events, cb, arg) < 0) {
  event_mm_free_(ev);
  return (
# 2273 "event.c" 3 4
         ((void *)0)
# 2273 "event.c"
             );
 }

 return (ev);
}

void
event_free(struct event *ev)
{





 event_del(ev);
 event_debug_note_teardown_(ev);
 event_mm_free_(ev);

}

void
event_debug_unassign(struct event *ev)
{
 event_debug_assert_not_added_(ev);
 event_debug_note_teardown_(ev);

 ev->ev_evcallback.evcb_flags &= ~0x80;
}


static int
event_finalize_nolock_(struct event_base *base, unsigned flags, struct event *ev, event_finalize_callback_fn cb)
{
 uint8_t closure = (flags & 0x10000) ?
     6 : 5;

 event_del_nolock_(ev, 0);
 ev->ev_evcallback.evcb_closure = closure;
 ev->ev_evcallback.evcb_cb_union.evcb_evfinalize = cb;
 event_active_nolock_(ev, 0x40, 1);
 ev->ev_evcallback.evcb_flags |= 0x40;
 return 0;
}

static int
event_finalize_impl_(unsigned flags, struct event *ev, event_finalize_callback_fn cb)
{
 int r;
 struct event_base *base = ev->ev_base;
 if (__builtin_expect(!!(!base),0)) {
  event_warnx("%s: event has no event_base set.", __func__);
  return -1;
 }

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 r = event_finalize_nolock_(base, flags, ev, cb);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return r;
}

int
event_finalize(unsigned flags, struct event *ev, event_finalize_callback_fn cb)
{
 return event_finalize_impl_(flags, ev, cb);
}

int
event_free_finalize(unsigned flags, struct event *ev, event_finalize_callback_fn cb)
{
 return event_finalize_impl_(flags|0x10000, ev, cb);
}

void
event_callback_finalize_nolock_(struct event_base *base, unsigned flags, struct event_callback *evcb, void (*cb)(struct event_callback *, void *))
{
 struct event *ev = 
# 2348 "event.c" 3 4
                   ((void *)0)
# 2348 "event.c"
                       ;
 if (evcb->evcb_flags & 0x80) {
  ev = event_callback_to_event(evcb);
  event_del_nolock_(ev, 0);
 } else {
  event_callback_cancel_nolock_(base, evcb, 0);
 }

 evcb->evcb_closure = 4;
 evcb->evcb_cb_union.evcb_cbfinalize = cb;
 event_callback_activate_nolock_(base, evcb);
 evcb->evcb_flags |= 0x40;
}

void
event_callback_finalize_(struct event_base *base, unsigned flags, struct event_callback *evcb, void (*cb)(struct event_callback *, void *))
{
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 event_callback_finalize_nolock_(base, flags, evcb, cb);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}




int
event_callback_finalize_many_(struct event_base *base, int n_cbs, struct event_callback **evcbs, void (*cb)(struct event_callback *, void *))
{
 int n_pending = 0, i;

 if (base == 
# 2378 "event.c" 3 4
            ((void *)0)
# 2378 "event.c"
                )
  base = event_global_current_base_;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);

 do { if ((event_debug_logging_mask_)) { event_debugx_ ("%s: %d events finalizing", __func__, n_cbs); } } while (0);




 for (i = 0; i < n_cbs; ++i) {
  struct event_callback *evcb = evcbs[i];
  if (evcb == base->current_event) {
   event_callback_finalize_nolock_(base, 0, evcb, cb);
   ++n_pending;
  } else {
   event_callback_cancel_nolock_(base, evcb, 0);
  }
 }

 if (n_pending == 0) {

  event_callback_finalize_nolock_(base, 0, evcbs[0], cb);
 }

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return 0;
}






int
event_priority_set(struct event *ev, int pri)
{
 event_debug_assert_is_setup_(ev);

 if (ev->ev_evcallback.evcb_flags & 0x08)
  return (-1);
 if (pri < 0 || pri >= ev->ev_base->nactivequeues)
  return (-1);

 ev->ev_evcallback.evcb_pri = pri;

 return (0);
}





int
event_pending(const struct event *ev, short event, struct timeval *tv)
{
 int flags = 0;

 if (__builtin_expect(!!(ev->ev_base == 
# 2436 "event.c" 3 4
    ((void *)0)
# 2436 "event.c"
    ),0)) {
  event_warnx("%s: event has no event_base set.", __func__);
  return 0;
 }

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.lock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);
 event_debug_assert_is_setup_(ev);

 if (ev->ev_evcallback.evcb_flags & 0x02)
  flags |= (ev->ev_events & (0x02|0x04|0x80|0x08));
 if (ev->ev_evcallback.evcb_flags & (0x08|0x20))
  flags |= ev->ev_res;
 if (ev->ev_evcallback.evcb_flags & 0x01)
  flags |= 0x01;

 event &= (0x01|0x02|0x04|0x80|0x08);


 if (tv != 
# 2454 "event.c" 3 4
          ((void *)0) 
# 2454 "event.c"
               && (flags & event & 0x01)) {
  struct timeval tmp = ev->ev_timeout;
  tmp.tv_usec &= 0x000fffff;

  
# 2458 "event.c" 3 4
 do { (
# 2458 "event.c"
 (tv)
# 2458 "event.c" 3 4
 )->tv_sec = (
# 2458 "event.c"
 (&ev->ev_base->tv_clock_diff)
# 2458 "event.c" 3 4
 )->tv_sec + (
# 2458 "event.c"
 (&tmp)
# 2458 "event.c" 3 4
 )->tv_sec; (
# 2458 "event.c"
 (tv)
# 2458 "event.c" 3 4
 )->tv_usec = (
# 2458 "event.c"
 (&ev->ev_base->tv_clock_diff)
# 2458 "event.c" 3 4
 )->tv_usec + (
# 2458 "event.c"
 (&tmp)
# 2458 "event.c" 3 4
 )->tv_usec; if ((
# 2458 "event.c"
 (tv)
# 2458 "event.c" 3 4
 )->tv_usec >= 1000000) { ++(
# 2458 "event.c"
 (tv)
# 2458 "event.c" 3 4
 )->tv_sec; (
# 2458 "event.c"
 (tv)
# 2458 "event.c" 3 4
 )->tv_usec -= 1000000; } } while (0)
# 2458 "event.c"
                                                       ;
 }

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.unlock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);

 return (flags & event);
}

int
event_initialized(const struct event *ev)
{
 if (!(ev->ev_evcallback.evcb_flags & 0x80))
  return 0;

 return 1;
}

void
event_get_assignment(const struct event *event, struct event_base **base_out, int *fd_out, short *events_out, event_callback_fn *callback_out, void **arg_out)
{
 event_debug_assert_is_setup_(event);

 if (base_out)
  *base_out = event->ev_base;
 if (fd_out)
  *fd_out = event->ev_fd;
 if (events_out)
  *events_out = event->ev_events;
 if (callback_out)
  *callback_out = event->ev_evcallback.evcb_cb_union.evcb_callback;
 if (arg_out)
  *arg_out = event->ev_evcallback.evcb_arg;
}

size_t
event_get_struct_event_size(void)
{
 return sizeof(struct event);
}

int
event_get_fd(const struct event *ev)
{
 event_debug_assert_is_setup_(ev);
 return ev->ev_fd;
}

struct event_base *
event_get_base(const struct event *ev)
{
 event_debug_assert_is_setup_(ev);
 return ev->ev_base;
}

short
event_get_events(const struct event *ev)
{
 event_debug_assert_is_setup_(ev);
 return ev->ev_events;
}

event_callback_fn
event_get_callback(const struct event *ev)
{
 event_debug_assert_is_setup_(ev);
 return ev->ev_evcallback.evcb_cb_union.evcb_callback;
}

void *
event_get_callback_arg(const struct event *ev)
{
 event_debug_assert_is_setup_(ev);
 return ev->ev_evcallback.evcb_arg;
}

int
event_get_priority(const struct event *ev)
{
 event_debug_assert_is_setup_(ev);
 return ev->ev_evcallback.evcb_pri;
}

int
event_add(struct event *ev, const struct timeval *tv)
{
 int res;

 if (__builtin_expect(!!(!ev->ev_base),0)) {
  event_warnx("%s: event has no event_base set.", __func__);
  return -1;
 }

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.lock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);

 res = event_add_nolock_(ev, tv, 0);

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.unlock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);

 return (res);
}





static int
evthread_notify_base_default(struct event_base *base)
{
 char buf[1];
 int r;
 buf[0] = (char) 0;



 r = write(base->th_notify_fd[1], buf, 1);

 return (r < 0 && ! ((
# 2574 "event.c" 3 4
                   (*__errno_location ())
# 2574 "event.c"
                   ) == 
# 2574 "event.c" 3 4
                   11
# 2574 "event.c"
                   )) ? -1 : 0;
}




static int
evthread_notify_base_eventfd(struct event_base *base)
{
 uint64_t msg = 1;
 int r;
 do {
  r = write(base->th_notify_fd[0], (void*) &msg, sizeof(msg));
 } while (r < 0 && 
# 2587 "event.c" 3 4
                  (*__errno_location ()) 
# 2587 "event.c"
                        == 
# 2587 "event.c" 3 4
                           11
# 2587 "event.c"
                                 );

 return (r < 0) ? -1 : 0;
}






static int
evthread_notify_base(struct event_base *base)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2600,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 2600 "event.c" 3 4
stderr
# 2600 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2600,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 if (!base->th_notify_fn)
  return -1;
 if (base->is_notify_pending)
  return 0;
 base->is_notify_pending = 1;
 return base->th_notify_fn(base);
}



int
event_remove_timer_nolock_(struct event *ev)
{
 struct event_base *base = ev->ev_base;

 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2616,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 2616 "event.c" 3 4
stderr
# 2616 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2616,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 event_debug_assert_is_setup_(ev);

 do { if ((event_debug_logging_mask_)) { event_debugx_ ("event_remove_timer_nolock: event: %p", ev); } } while (0);


 if (ev->ev_evcallback.evcb_flags & 0x01) {
  event_queue_remove_timeout(base, ev);
  
# 2624 "event.c" 3 4
 ((
# 2624 "event.c"
 &ev->ev_.ev_io.ev_timeout
# 2624 "event.c" 3 4
 )->tv_sec = (
# 2624 "event.c"
 &ev->ev_.ev_io.ev_timeout
# 2624 "event.c" 3 4
 )->tv_usec = 0)
# 2624 "event.c"
                                             ;
 }

 return (0);
}

int
event_remove_timer(struct event *ev)
{
 int res;

 if (__builtin_expect(!!(!ev->ev_base),0)) {
  event_warnx("%s: event has no event_base set.", __func__);
  return -1;
 }

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.lock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);

 res = event_remove_timer_nolock_(ev);

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.unlock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);

 return (res);
}





int
event_add_nolock_(struct event *ev, const struct timeval *tv,
    int tv_is_absolute)
{
 struct event_base *base = ev->ev_base;
 int res = 0;
 int notify = 0;

 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2661,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 2661 "event.c" 3 4
stderr
# 2661 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2661,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 event_debug_assert_is_setup_(ev);

 do { if ((event_debug_logging_mask_)) { event_debugx_ ( "event_add: event: %p (fd ""%d""), %s%s%s%scall %p", ev, (ev->ev_fd), ev->ev_events & 0x02 ? "EV_READ " : " ", ev->ev_events & 0x04 ? "EV_WRITE " : " ", ev->ev_events & 0x80 ? "EV_CLOSED " : " ", tv ? "EV_TIMEOUT " : " ", ev->ev_evcallback.evcb_cb_union.evcb_callback); } } while (0)







                    ;

 do { if (__builtin_expect(!!(!(!(ev->ev_evcallback.evcb_flags & ~0xff))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2674,"!(ev->ev_flags & ~EVLIST_ALL)",__func__); (void)fprintf(
# 2674 "event.c" 3 4
stderr
# 2674 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2674,"!(ev->ev_flags & ~EVLIST_ALL)",__func__); abort(); } } while (0);

 if (ev->ev_evcallback.evcb_flags & 0x40) {

  return (-1);
 }





 if (tv != 
# 2685 "event.c" 3 4
          ((void *)0) 
# 2685 "event.c"
               && !(ev->ev_evcallback.evcb_flags & 0x01)) {
  if (min_heap_reserve_(&base->timeheap,
   1 + min_heap_size_(&base->timeheap)) == -1)
   return (-1);
 }






 if (base->current_event == event_to_event_callback(ev) &&
     (ev->ev_events & 0x08)
     && !(evthread_id_fn_ == 
# 2698 "event.c" 3 4
        ((void *)0) 
# 2698 "event.c"
        || (base)->th_owner_id == evthread_id_fn_())) {
  ++base->current_event_waiters;
  ( (base->current_event_cond) ? evthread_cond_fns_.wait_condition((base->current_event_cond), (base->th_base_lock), 
# 2700 "event.c" 3 4
 ((void *)0)
# 2700 "event.c"
 ) : 0 );
 }


 if ((ev->ev_events & (0x02|0x04|0x80|0x08)) &&
     !(ev->ev_evcallback.evcb_flags & (0x02|0x08|0x20))) {
  if (ev->ev_events & (0x02|0x04|0x80))
   res = evmap_io_add_(base, ev->ev_fd, ev);
  else if (ev->ev_events & 0x08)
   res = evmap_signal_add_(base, (int)ev->ev_fd, ev);
  if (res != -1)
   event_queue_insert_inserted(base, ev);
  if (res == 1) {

   notify = 1;
   res = 0;
  }
 }





 if (res != -1 && tv != 
# 2723 "event.c" 3 4
                       ((void *)0)
# 2723 "event.c"
                           ) {
  struct timeval now;
  int common_timeout;
# 2737 "event.c"
  if (ev->ev_evcallback.evcb_closure == 2 && !tv_is_absolute)
   ev->ev_.ev_io.ev_timeout = *tv;


  if (ev->ev_evcallback.evcb_flags & 0x01) {
   event_queue_remove_timeout(base, ev);
  }





  if ((ev->ev_evcallback.evcb_flags & 0x08) &&
      (ev->ev_res & 0x01)) {
   if (ev->ev_events & 0x08) {



    if (ev->ev_.ev_signal.ev_ncalls && ev->ev_.ev_signal.ev_pncalls) {

     *ev->ev_.ev_signal.ev_pncalls = 0;
    }
   }

   event_queue_remove_active(base, event_to_event_callback(ev));
  }

  gettime(base, &now);

  common_timeout = is_common_timeout(tv, base);





  if (tv_is_absolute) {
   ev->ev_timeout = *tv;
  } else if (common_timeout) {
   struct timeval tmp = *tv;
   tmp.tv_usec &= 0x000fffff;
   
# 2777 "event.c" 3 4
  do { (
# 2777 "event.c"
  (&ev->ev_timeout)
# 2777 "event.c" 3 4
  )->tv_sec = (
# 2777 "event.c"
  (&now)
# 2777 "event.c" 3 4
  )->tv_sec + (
# 2777 "event.c"
  (&tmp)
# 2777 "event.c" 3 4
  )->tv_sec; (
# 2777 "event.c"
  (&ev->ev_timeout)
# 2777 "event.c" 3 4
  )->tv_usec = (
# 2777 "event.c"
  (&now)
# 2777 "event.c" 3 4
  )->tv_usec + (
# 2777 "event.c"
  (&tmp)
# 2777 "event.c" 3 4
  )->tv_usec; if ((
# 2777 "event.c"
  (&ev->ev_timeout)
# 2777 "event.c" 3 4
  )->tv_usec >= 1000000) { ++(
# 2777 "event.c"
  (&ev->ev_timeout)
# 2777 "event.c" 3 4
  )->tv_sec; (
# 2777 "event.c"
  (&ev->ev_timeout)
# 2777 "event.c" 3 4
  )->tv_usec -= 1000000; } } while (0)
# 2777 "event.c"
                                              ;
   ev->ev_timeout.tv_usec |=
       (tv->tv_usec & ~0x000fffff);
  } else {
   
# 2781 "event.c" 3 4
  do { (
# 2781 "event.c"
  (&ev->ev_timeout)
# 2781 "event.c" 3 4
  )->tv_sec = (
# 2781 "event.c"
  (&now)
# 2781 "event.c" 3 4
  )->tv_sec + (
# 2781 "event.c"
  (tv)
# 2781 "event.c" 3 4
  )->tv_sec; (
# 2781 "event.c"
  (&ev->ev_timeout)
# 2781 "event.c" 3 4
  )->tv_usec = (
# 2781 "event.c"
  (&now)
# 2781 "event.c" 3 4
  )->tv_usec + (
# 2781 "event.c"
  (tv)
# 2781 "event.c" 3 4
  )->tv_usec; if ((
# 2781 "event.c"
  (&ev->ev_timeout)
# 2781 "event.c" 3 4
  )->tv_usec >= 1000000) { ++(
# 2781 "event.c"
  (&ev->ev_timeout)
# 2781 "event.c" 3 4
  )->tv_sec; (
# 2781 "event.c"
  (&ev->ev_timeout)
# 2781 "event.c" 3 4
  )->tv_usec -= 1000000; } } while (0)
# 2781 "event.c"
                                            ;
  }

  do { if ((event_debug_logging_mask_)) { event_debugx_ ( "event_add: event %p, timeout in %d seconds %d useconds, call %p", ev, (int)tv->tv_sec, (int)tv->tv_usec, ev->ev_evcallback.evcb_cb_union.evcb_callback); } } while (0)

                                                            ;




  event_queue_insert_timeout(base, ev);


  if (common_timeout) {
   struct common_timeout_list *ctl =
       get_common_timeout_list(base, &ev->ev_timeout);
   if (ev == 
# 2797 "event.c" 3 4
            ((
# 2797 "event.c"
            &ctl->events
# 2797 "event.c" 3 4
            )->tqh_first)
# 2797 "event.c"
                                     ) {
    common_timeout_schedule(ctl, &now, ev);
   }
  } else {
   struct event* top = 
# 2801 "event.c" 3 4
                      ((void *)0)
# 2801 "event.c"
                          ;






   if (min_heap_elt_is_top_(ev))
    notify = 1;
   else if ((top = min_heap_top_(&base->timeheap)) != 
# 2810 "event.c" 3 4
                                                     ((void *)0) 
# 2810 "event.c"
                                                          &&
      (((&top->ev_timeout)->tv_sec == (&now)->tv_sec) ? ((&top->ev_timeout)->tv_usec < (&now)->tv_usec) : ((&top->ev_timeout)->tv_sec < (&now)->tv_sec)))
    notify = 1;
  }
 }


 if (res != -1 && notify && (evthread_id_fn_ != 
# 2817 "event.c" 3 4
                           ((void *)0) 
# 2817 "event.c"
                           && (base)->running_loop && (base)->th_owner_id != evthread_id_fn_()))
  evthread_notify_base(base);

 event_debug_note_add_(ev);

 return (res);
}

static int
event_del_(struct event *ev, int blocking)
{
 int res;
 struct event_base *base = ev->ev_base;

 if (__builtin_expect(!!(!base),0)) {
  event_warnx("%s: event has no event_base set.", __func__);
  return -1;
 }

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 res = event_del_nolock_(ev, blocking);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);

 return (res);
}

int
event_del(struct event *ev)
{
 return event_del_(ev, 2);
}

int
event_del_block(struct event *ev)
{
 return event_del_(ev, 1);
}

int
event_del_noblock(struct event *ev)
{
 return event_del_(ev, 0);
}






int
event_del_nolock_(struct event *ev, int blocking)
{
 struct event_base *base;
 int res = 0, notify = 0;

 do { if ((event_debug_logging_mask_)) { event_debugx_ ("event_del: %p (fd ""%d""), callback %p", ev, (ev->ev_fd), ev->ev_evcallback.evcb_cb_union.evcb_callback); } } while (0)
                                               ;


 if (ev->ev_base == 
# 2876 "event.c" 3 4
                   ((void *)0)
# 2876 "event.c"
                       )
  return (-1);

 do { if (((ev->ev_base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((ev->ev_base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2879,"evthread_is_debug_lock_held_((ev->ev_base)->th_base_lock)",__func__); (void)fprintf(
# 2879 "event.c" 3 4
stderr
# 2879 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2879,"evthread_is_debug_lock_held_((ev->ev_base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);

 if (blocking != 3) {
  if (ev->ev_evcallback.evcb_flags & 0x40) {

   return 0;
  }
 }

 base = ev->ev_base;

 do { if (__builtin_expect(!!(!(!(ev->ev_evcallback.evcb_flags & ~0xff))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2890,"!(ev->ev_flags & ~EVLIST_ALL)",__func__); (void)fprintf(
# 2890 "event.c" 3 4
stderr
# 2890 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2890,"!(ev->ev_flags & ~EVLIST_ALL)",__func__); abort(); } } while (0);


 if (ev->ev_events & 0x08) {
  if (ev->ev_.ev_signal.ev_ncalls && ev->ev_.ev_signal.ev_pncalls) {

   *ev->ev_.ev_signal.ev_pncalls = 0;
  }
 }

 if (ev->ev_evcallback.evcb_flags & 0x01) {







  event_queue_remove_timeout(base, ev);
 }

 if (ev->ev_evcallback.evcb_flags & 0x08)
  event_queue_remove_active(base, event_to_event_callback(ev));
 else if (ev->ev_evcallback.evcb_flags & 0x20)
  event_queue_remove_active_later(base, event_to_event_callback(ev));

 if (ev->ev_evcallback.evcb_flags & 0x02) {
  event_queue_remove_inserted(base, ev);
  if (ev->ev_events & (0x02|0x04|0x80))
   res = evmap_io_del_(base, ev->ev_fd, ev);
  else
   res = evmap_signal_del_(base, (int)ev->ev_fd, ev);
  if (res == 1) {

   notify = 1;
   res = 0;
  }


  if (!event_haveevents(base) && !((base)->event_count_active))
   notify = 1;
 }


 if (res != -1 && notify && (evthread_id_fn_ != 
# 2934 "event.c" 3 4
                           ((void *)0) 
# 2934 "event.c"
                           && (base)->running_loop && (base)->th_owner_id != evthread_id_fn_()))
  evthread_notify_base(base);

 event_debug_note_del_(ev);







 if (blocking != 0 &&
     base->current_event == event_to_event_callback(ev) &&
     !(evthread_id_fn_ == 
# 2947 "event.c" 3 4
     ((void *)0) 
# 2947 "event.c"
     || (base)->th_owner_id == evthread_id_fn_()) &&
     (blocking == 1 || !(ev->ev_events & 0x40))) {
  ++base->current_event_waiters;
  ( (base->current_event_cond) ? evthread_cond_fns_.wait_condition((base->current_event_cond), (base->th_base_lock), 
# 2950 "event.c" 3 4
 ((void *)0)
# 2950 "event.c"
 ) : 0 );
 }


 return (res);
}

void
event_active(struct event *ev, int res, short ncalls)
{
 if (__builtin_expect(!!(!ev->ev_base),0)) {
  event_warnx("%s: event has no event_base set.", __func__);
  return;
 }

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.lock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);

 event_debug_assert_is_setup_(ev);

 event_active_nolock_(ev, res, ncalls);

 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.unlock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);
}


void
event_active_nolock_(struct event *ev, int res, short ncalls)
{
 struct event_base *base;

 do { if ((event_debug_logging_mask_)) { event_debugx_ ("event_active: %p (fd ""%d""), res %d, callback %p", ev, (ev->ev_fd), (int)res, ev->ev_evcallback.evcb_cb_union.evcb_callback); } } while (0)
                                                         ;

 base = ev->ev_base;
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2984,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 2984 "event.c" 3 4
stderr
# 2984 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",2984,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);

 if (ev->ev_evcallback.evcb_flags & 0x40) {

  return;
 }

 switch ((ev->ev_evcallback.evcb_flags & (0x08|0x20))) {
 default:
 case 0x08|0x20:
  do { if (__builtin_expect(!!(!(0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",2994,"0",__func__); (void)fprintf(
# 2994 "event.c" 3 4
 stderr
# 2994 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",2994,"0",__func__); abort(); } } while (0);
  break;
 case 0x08:

  ev->ev_res |= res;
  return;
 case 0x20:
  ev->ev_res |= res;
  break;
 case 0:
  ev->ev_res = res;
  break;
 }

 if (ev->ev_evcallback.evcb_pri < base->event_running_priority)
  base->event_continue = 1;

 if (ev->ev_events & 0x08) {

  if (base->current_event == event_to_event_callback(ev) &&
      !(evthread_id_fn_ == 
# 3014 "event.c" 3 4
      ((void *)0) 
# 3014 "event.c"
      || (base)->th_owner_id == evthread_id_fn_())) {
   ++base->current_event_waiters;
   ( (base->current_event_cond) ? evthread_cond_fns_.wait_condition((base->current_event_cond), (base->th_base_lock), 
# 3016 "event.c" 3 4
  ((void *)0)
# 3016 "event.c"
  ) : 0 );
  }

  ev->ev_.ev_signal.ev_ncalls = ncalls;
  ev->ev_.ev_signal.ev_pncalls = 
# 3020 "event.c" 3 4
                  ((void *)0)
# 3020 "event.c"
                      ;
 }

 event_callback_activate_nolock_(base, event_to_event_callback(ev));
}

void
event_active_later_(struct event *ev, int res)
{
 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.lock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);
 event_active_later_nolock_(ev, res);
 do { do { if ((ev->ev_base)->th_base_lock) evthread_lock_fns_.unlock(0, (ev->ev_base)->th_base_lock); } while (0); } while (0);
}

void
event_active_later_nolock_(struct event *ev, int res)
{
 struct event_base *base = ev->ev_base;
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3038,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3038 "event.c" 3 4
stderr
# 3038 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3038,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);

 if (ev->ev_evcallback.evcb_flags & (0x08|0x20)) {

  ev->ev_res |= res;
  return;
 }

 ev->ev_res = res;

 event_callback_activate_later_nolock_(base, event_to_event_callback(ev));
}

int
event_callback_activate_(struct event_base *base,
    struct event_callback *evcb)
{
 int r;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 r = event_callback_activate_nolock_(base, evcb);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return r;
}

int
event_callback_activate_nolock_(struct event_base *base,
    struct event_callback *evcb)
{
 int r = 1;

 if (evcb->evcb_flags & 0x40)
  return 0;

 switch (evcb->evcb_flags & (0x08|0x20)) {
 default:
  do { if (__builtin_expect(!!(!(0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3073,"0",__func__); (void)fprintf(
# 3073 "event.c" 3 4
 stderr
# 3073 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",3073,"0",__func__); abort(); } } while (0);
  __attribute__((fallthrough));
 case 0x20:
  event_queue_remove_active_later(base, evcb);
  r = 0;
  break;
 case 0x08:
  return 0;
 case 0:
  break;
 }

 event_queue_insert_active(base, evcb);

 if ((evthread_id_fn_ != 
# 3087 "event.c" 3 4
    ((void *)0) 
# 3087 "event.c"
    && (base)->running_loop && (base)->th_owner_id != evthread_id_fn_()))
  evthread_notify_base(base);

 return r;
}

int
event_callback_activate_later_nolock_(struct event_base *base,
    struct event_callback *evcb)
{
 if (evcb->evcb_flags & (0x08|0x20))
  return 0;

 event_queue_insert_active_later(base, evcb);
 if ((evthread_id_fn_ != 
# 3101 "event.c" 3 4
    ((void *)0) 
# 3101 "event.c"
    && (base)->running_loop && (base)->th_owner_id != evthread_id_fn_()))
  evthread_notify_base(base);
 return 1;
}

void
event_callback_init_(struct event_base *base,
    struct event_callback *cb)
{
 memset(cb, 0, sizeof(*cb));
 cb->evcb_pri = base->nactivequeues - 1;
}

int
event_callback_cancel_(struct event_base *base,
    struct event_callback *evcb)
{
 int r;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 r = event_callback_cancel_nolock_(base, evcb, 0);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return r;
}

int
event_callback_cancel_nolock_(struct event_base *base,
    struct event_callback *evcb, int even_if_finalizing)
{
 if ((evcb->evcb_flags & 0x40) && !even_if_finalizing)
  return 0;

 if (evcb->evcb_flags & 0x80)
  return event_del_nolock_(event_callback_to_event(evcb),
      even_if_finalizing ? 3 : 2);

 switch ((evcb->evcb_flags & (0x08|0x20))) {
 default:
 case 0x08|0x20:
  do { if (__builtin_expect(!!(!(0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3139,"0",__func__); (void)fprintf(
# 3139 "event.c" 3 4
 stderr
# 3139 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",3139,"0",__func__); abort(); } } while (0);
  break;
 case 0x08:

  event_queue_remove_active(base, evcb);
  return 0;
 case 0x20:
  event_queue_remove_active_later(base, evcb);
  break;
 case 0:
  break;
 }

 return 0;
}

void
event_deferred_cb_init_(struct event_callback *cb, uint8_t priority, deferred_cb_fn fn, void *arg)
{
 memset(cb, 0, sizeof(*cb));
 cb->evcb_cb_union.evcb_selfcb = fn;
 cb->evcb_arg = arg;
 cb->evcb_pri = priority;
 cb->evcb_closure = 3;
}

void
event_deferred_cb_set_priority_(struct event_callback *cb, uint8_t priority)
{
 cb->evcb_pri = priority;
}

void
event_deferred_cb_cancel_(struct event_base *base, struct event_callback *cb)
{
 if (!base)
  base = event_global_current_base_;
 event_callback_cancel_(base, cb);
}


int
event_deferred_cb_schedule_(struct event_base *base, struct event_callback *cb)
{
 int r = 1;
 if (!base)
  base = event_global_current_base_;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 if (base->n_deferreds_queued > 32) {
  r = event_callback_activate_later_nolock_(base, cb);
 } else {
  r = event_callback_activate_nolock_(base, cb);
  if (r) {
   ++base->n_deferreds_queued;
  }
 }
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return r;
}

static int
timeout_next(struct event_base *base, struct timeval **tv_p)
{

 struct timeval now;
 struct event *ev;
 struct timeval *tv = *tv_p;
 int res = 0;

 ev = min_heap_top_(&base->timeheap);

 if (ev == 
# 3210 "event.c" 3 4
          ((void *)0)
# 3210 "event.c"
              ) {

  *tv_p = 
# 3212 "event.c" 3 4
         ((void *)0)
# 3212 "event.c"
             ;
  goto out;
 }

 if (gettime(base, &now) == -1) {
  res = -1;
  goto out;
 }

 if ((((&ev->ev_timeout)->tv_sec == (&now)->tv_sec) ? ((&ev->ev_timeout)->tv_usec <= (&now)->tv_usec) : ((&ev->ev_timeout)->tv_sec <= (&now)->tv_sec))) {
  
# 3222 "event.c" 3 4
 ((
# 3222 "event.c"
 tv
# 3222 "event.c" 3 4
 )->tv_sec = (
# 3222 "event.c"
 tv
# 3222 "event.c" 3 4
 )->tv_usec = 0)
# 3222 "event.c"
                      ;
  goto out;
 }

 
# 3226 "event.c" 3 4
do { (
# 3226 "event.c"
(tv)
# 3226 "event.c" 3 4
)->tv_sec = (
# 3226 "event.c"
(&ev->ev_timeout)
# 3226 "event.c" 3 4
)->tv_sec - (
# 3226 "event.c"
(&now)
# 3226 "event.c" 3 4
)->tv_sec; (
# 3226 "event.c"
(tv)
# 3226 "event.c" 3 4
)->tv_usec = (
# 3226 "event.c"
(&ev->ev_timeout)
# 3226 "event.c" 3 4
)->tv_usec - (
# 3226 "event.c"
(&now)
# 3226 "event.c" 3 4
)->tv_usec; if ((
# 3226 "event.c"
(tv)
# 3226 "event.c" 3 4
)->tv_usec < 0) { --(
# 3226 "event.c"
(tv)
# 3226 "event.c" 3 4
)->tv_sec; (
# 3226 "event.c"
(tv)
# 3226 "event.c" 3 4
)->tv_usec += 1000000; } } while (0)
# 3226 "event.c"
                                          ;

 do { if (__builtin_expect(!!(!(tv->tv_sec >= 0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3228,"tv->tv_sec >= 0",__func__); (void)fprintf(
# 3228 "event.c" 3 4
stderr
# 3228 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3228,"tv->tv_sec >= 0",__func__); abort(); } } while (0);
 do { if (__builtin_expect(!!(!(tv->tv_usec >= 0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3229,"tv->tv_usec >= 0",__func__); (void)fprintf(
# 3229 "event.c" 3 4
stderr
# 3229 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3229,"tv->tv_usec >= 0",__func__); abort(); } } while (0);
 do { if ((event_debug_logging_mask_)) { event_debugx_ ("timeout_next: event: %p, in %d seconds, %d useconds", ev, (int)tv->tv_sec, (int)tv->tv_usec); } } while (0);

out:
 return (res);
}


static void
timeout_process(struct event_base *base)
{

 struct timeval now;
 struct event *ev;

 if (min_heap_empty_(&base->timeheap)) {
  return;
 }

 gettime(base, &now);

 while ((ev = min_heap_top_(&base->timeheap))) {
  if ((((&ev->ev_timeout)->tv_sec == (&now)->tv_sec) ? ((&ev->ev_timeout)->tv_usec > (&now)->tv_usec) : ((&ev->ev_timeout)->tv_sec > (&now)->tv_sec)))
   break;


  event_del_nolock_(ev, 0);

  do { if ((event_debug_logging_mask_)) { event_debugx_ ("timeout_process: event: %p, call %p", ev, ev->ev_evcallback.evcb_cb_union.evcb_callback); } } while (0)
                         ;
  event_active_nolock_(ev, 0x01, 1);
 }
}
# 3280 "event.c"
static void
event_queue_remove_inserted(struct event_base *base, struct event *ev)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3283,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3283 "event.c" 3 4
stderr
# 3283 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3283,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 if (__builtin_expect(!!(!(ev->ev_evcallback.evcb_flags & 0x02)),0)) {
  event_errx(1, "%s: %p(fd ""%d"") not on queue %x", __func__,
      ev, (ev->ev_fd), 0x02);
  return;
 }
 ((base)->event_count -= !((ev->ev_evcallback.evcb_flags) & 0x10));
 ev->ev_evcallback.evcb_flags &= ~0x02;
}
static void
event_queue_remove_active(struct event_base *base, struct event_callback *evcb)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3295,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3295 "event.c" 3 4
stderr
# 3295 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3295,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 if (__builtin_expect(!!(!(evcb->evcb_flags & 0x08)),0)) {
  event_errx(1, "%s: %p not on queue %x", __func__,
      evcb, 0x08);
  return;
 }
 ((base)->event_count -= !((evcb->evcb_flags) & 0x10));
 evcb->evcb_flags &= ~0x08;
 base->event_count_active--;

 
# 3305 "event.c" 3 4
do { if (((
# 3305 "event.c"
evcb
# 3305 "event.c" 3 4
)->
# 3305 "event.c"
evcb_active_next
# 3305 "event.c" 3 4
.tqe_next) != ((void *)0)) (
# 3305 "event.c"
evcb
# 3305 "event.c" 3 4
)->
# 3305 "event.c"
evcb_active_next
# 3305 "event.c" 3 4
.tqe_next->
# 3305 "event.c"
evcb_active_next
# 3305 "event.c" 3 4
.tqe_prev = (
# 3305 "event.c"
evcb
# 3305 "event.c" 3 4
)->
# 3305 "event.c"
evcb_active_next
# 3305 "event.c" 3 4
.tqe_prev; else (
# 3305 "event.c"
&base->activequeues[evcb->evcb_pri]
# 3305 "event.c" 3 4
)->tqh_last = (
# 3305 "event.c"
evcb
# 3305 "event.c" 3 4
)->
# 3305 "event.c"
evcb_active_next
# 3305 "event.c" 3 4
.tqe_prev; *(
# 3305 "event.c"
evcb
# 3305 "event.c" 3 4
)->
# 3305 "event.c"
evcb_active_next
# 3305 "event.c" 3 4
.tqe_prev = (
# 3305 "event.c"
evcb
# 3305 "event.c" 3 4
)->
# 3305 "event.c"
evcb_active_next
# 3305 "event.c" 3 4
.tqe_next; } while ( 0)
                            
# 3306 "event.c"
                           ;
}
static void
event_queue_remove_active_later(struct event_base *base, struct event_callback *evcb)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3311,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3311 "event.c" 3 4
stderr
# 3311 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3311,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 if (__builtin_expect(!!(!(evcb->evcb_flags & 0x20)),0)) {
  event_errx(1, "%s: %p not on queue %x", __func__,
      evcb, 0x20);
  return;
 }
 ((base)->event_count -= !((evcb->evcb_flags) & 0x10));
 evcb->evcb_flags &= ~0x20;
 base->event_count_active--;

 
# 3321 "event.c" 3 4
do { if (((
# 3321 "event.c"
evcb
# 3321 "event.c" 3 4
)->
# 3321 "event.c"
evcb_active_next
# 3321 "event.c" 3 4
.tqe_next) != ((void *)0)) (
# 3321 "event.c"
evcb
# 3321 "event.c" 3 4
)->
# 3321 "event.c"
evcb_active_next
# 3321 "event.c" 3 4
.tqe_next->
# 3321 "event.c"
evcb_active_next
# 3321 "event.c" 3 4
.tqe_prev = (
# 3321 "event.c"
evcb
# 3321 "event.c" 3 4
)->
# 3321 "event.c"
evcb_active_next
# 3321 "event.c" 3 4
.tqe_prev; else (
# 3321 "event.c"
&base->active_later_queue
# 3321 "event.c" 3 4
)->tqh_last = (
# 3321 "event.c"
evcb
# 3321 "event.c" 3 4
)->
# 3321 "event.c"
evcb_active_next
# 3321 "event.c" 3 4
.tqe_prev; *(
# 3321 "event.c"
evcb
# 3321 "event.c" 3 4
)->
# 3321 "event.c"
evcb_active_next
# 3321 "event.c" 3 4
.tqe_prev = (
# 3321 "event.c"
evcb
# 3321 "event.c" 3 4
)->
# 3321 "event.c"
evcb_active_next
# 3321 "event.c" 3 4
.tqe_next; } while ( 0)
# 3321 "event.c"
                                                               ;
}
static void
event_queue_remove_timeout(struct event_base *base, struct event *ev)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3326,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3326 "event.c" 3 4
stderr
# 3326 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3326,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 if (__builtin_expect(!!(!(ev->ev_evcallback.evcb_flags & 0x01)),0)) {
  event_errx(1, "%s: %p(fd ""%d"") not on queue %x", __func__,
      ev, (ev->ev_fd), 0x01);
  return;
 }
 ((base)->event_count -= !((ev->ev_evcallback.evcb_flags) & 0x10));
 ev->ev_evcallback.evcb_flags &= ~0x01;

 if (is_common_timeout(&ev->ev_timeout, base)) {
  struct common_timeout_list *ctl =
      get_common_timeout_list(base, &ev->ev_timeout);
  
# 3338 "event.c" 3 4
 do { if (((
# 3338 "event.c"
 ev
# 3338 "event.c" 3 4
 )->
# 3338 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3338 "event.c" 3 4
 .tqe_next) != ((void *)0)) (
# 3338 "event.c"
 ev
# 3338 "event.c" 3 4
 )->
# 3338 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3338 "event.c" 3 4
 .tqe_next->
# 3338 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3338 "event.c" 3 4
 .tqe_prev = (
# 3338 "event.c"
 ev
# 3338 "event.c" 3 4
 )->
# 3338 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3338 "event.c" 3 4
 .tqe_prev; else (
# 3338 "event.c"
 &ctl->events
# 3338 "event.c" 3 4
 )->tqh_last = (
# 3338 "event.c"
 ev
# 3338 "event.c" 3 4
 )->
# 3338 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3338 "event.c" 3 4
 .tqe_prev; *(
# 3338 "event.c"
 ev
# 3338 "event.c" 3 4
 )->
# 3338 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3338 "event.c" 3 4
 .tqe_prev = (
# 3338 "event.c"
 ev
# 3338 "event.c" 3 4
 )->
# 3338 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3338 "event.c" 3 4
 .tqe_next; } while ( 0)
                                                 
# 3339 "event.c"
                                                ;
 } else {
  min_heap_erase_(&base->timeheap, ev);
 }
}
# 3387 "event.c"
static void
insert_common_timeout_inorder(struct common_timeout_list *ctl,
    struct event *ev)
{
 struct event *e;







 
# 3399 "event.c" 3 4
for ((
# 3399 "event.c"
e
# 3399 "event.c" 3 4
) = (*(((struct 
# 3399 "event.c"
event_list 
# 3399 "event.c" 3 4
*)((
# 3399 "event.c"
&ctl->events
# 3399 "event.c" 3 4
)->tqh_last))->tqh_last)); (
# 3399 "event.c"
e
# 3399 "event.c" 3 4
); (
# 3399 "event.c"
e
# 3399 "event.c" 3 4
) = (*(((struct 
# 3399 "event.c"
event_list 
# 3399 "event.c" 3 4
*)((
# 3399 "event.c"
e
# 3399 "event.c" 3 4
)->
# 3399 "event.c"
ev_timeout_pos.ev_next_with_common_timeout
# 3399 "event.c" 3 4
.tqe_prev))->tqh_last)))
                                                             
# 3400 "event.c"
                                                            {




  do { if (__builtin_expect(!!(!(is_same_common_timeout(&e->ev_timeout, &ev->ev_timeout))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s",
                                                          "event.c"
# 3405 "event.c"
  ,
                                                          3406
# 3405 "event.c"
  ,"is_same_common_timeout(&e->ev_timeout, &ev->ev_timeout)",__func__); (void)fprintf(
# 3405 "event.c" 3 4
 stderr
# 3405 "event.c"
 , "%s:%d: Assertion %s failed in %s",
                                                          "event.c"
# 3405 "event.c"
  ,
                                                          3406
# 3405 "event.c"
  ,"is_same_common_timeout(&e->ev_timeout, &ev->ev_timeout)",__func__); abort(); } } while (0)
                                                           ;
  if ((((&ev->ev_timeout)->tv_sec == (&e->ev_timeout)->tv_sec) ? ((&ev->ev_timeout)->tv_usec >= (&e->ev_timeout)->tv_usec) : ((&ev->ev_timeout)->tv_sec >= (&e->ev_timeout)->tv_sec))) {
   
# 3408 "event.c" 3 4
  do { if (((
# 3408 "event.c"
  ev
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_next = (
# 3408 "event.c"
  e
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_next) != ((void *)0)) (
# 3408 "event.c"
  ev
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_next->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_prev = &(
# 3408 "event.c"
  ev
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_next; else (
# 3408 "event.c"
  &ctl->events
# 3408 "event.c" 3 4
  )->tqh_last = &(
# 3408 "event.c"
  ev
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_next; (
# 3408 "event.c"
  e
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_next = (
# 3408 "event.c"
  ev
# 3408 "event.c" 3 4
  ); (
# 3408 "event.c"
  ev
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_prev = &(
# 3408 "event.c"
  e
# 3408 "event.c" 3 4
  )->
# 3408 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3408 "event.c" 3 4
  .tqe_next; } while ( 0)
                                                  
# 3409 "event.c"
                                                 ;
   return;
  }
 }
 
# 3413 "event.c" 3 4
do { if (((
# 3413 "event.c"
ev
# 3413 "event.c" 3 4
)->
# 3413 "event.c"
ev_timeout_pos.ev_next_with_common_timeout
# 3413 "event.c" 3 4
.tqe_next = (
# 3413 "event.c"
&ctl->events
# 3413 "event.c" 3 4
)->tqh_first) != ((void *)0)) (
# 3413 "event.c"
&ctl->events
# 3413 "event.c" 3 4
)->tqh_first->
# 3413 "event.c"
ev_timeout_pos.ev_next_with_common_timeout
# 3413 "event.c" 3 4
.tqe_prev = &(
# 3413 "event.c"
ev
# 3413 "event.c" 3 4
)->
# 3413 "event.c"
ev_timeout_pos.ev_next_with_common_timeout
# 3413 "event.c" 3 4
.tqe_next; else (
# 3413 "event.c"
&ctl->events
# 3413 "event.c" 3 4
)->tqh_last = &(
# 3413 "event.c"
ev
# 3413 "event.c" 3 4
)->
# 3413 "event.c"
ev_timeout_pos.ev_next_with_common_timeout
# 3413 "event.c" 3 4
.tqe_next; (
# 3413 "event.c"
&ctl->events
# 3413 "event.c" 3 4
)->tqh_first = (
# 3413 "event.c"
ev
# 3413 "event.c" 3 4
); (
# 3413 "event.c"
ev
# 3413 "event.c" 3 4
)->
# 3413 "event.c"
ev_timeout_pos.ev_next_with_common_timeout
# 3413 "event.c" 3 4
.tqe_prev = &(
# 3413 "event.c"
&ctl->events
# 3413 "event.c" 3 4
)->tqh_first; } while ( 0)
                                                
# 3414 "event.c"
                                               ;
}

static void
event_queue_insert_inserted(struct event_base *base, struct event *ev)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3420,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3420 "event.c" 3 4
stderr
# 3420 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3420,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);

 if (__builtin_expect(!!(ev->ev_evcallback.evcb_flags & 0x02),0)) {
  event_errx(1, "%s: %p(fd ""%d"") already inserted", __func__,
      ev, (ev->ev_fd));
  return;
 }

 do { ((base)->event_count += !((ev->ev_evcallback.evcb_flags) & 0x10)); (base)->event_count_max = ((((base)->event_count_max)>((base)->event_count))?((base)->event_count_max):((base)->event_count)); } while (0);

 ev->ev_evcallback.evcb_flags |= 0x02;
}

static void
event_queue_insert_active(struct event_base *base, struct event_callback *evcb)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3436,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3436 "event.c" 3 4
stderr
# 3436 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3436,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);

 if (evcb->evcb_flags & 0x08) {

  return;
 }

 do { ((base)->event_count += !((evcb->evcb_flags) & 0x10)); (base)->event_count_max = ((((base)->event_count_max)>((base)->event_count))?((base)->event_count_max):((base)->event_count)); } while (0);

 evcb->evcb_flags |= 0x08;

 base->event_count_active++;
 base->event_count_active_max = (((base->event_count_active_max)>(base->event_count_active))?(base->event_count_active_max):(base->event_count_active));
 do { if (__builtin_expect(!!(!(evcb->evcb_pri < base->nactivequeues)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3449,"evcb->evcb_pri < base->nactivequeues",__func__); (void)fprintf(
# 3449 "event.c" 3 4
stderr
# 3449 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3449,"evcb->evcb_pri < base->nactivequeues",__func__); abort(); } } while (0);
 
# 3450 "event.c" 3 4
do { (
# 3450 "event.c"
evcb
# 3450 "event.c" 3 4
)->
# 3450 "event.c"
evcb_active_next
# 3450 "event.c" 3 4
.tqe_next = ((void *)0); (
# 3450 "event.c"
evcb
# 3450 "event.c" 3 4
)->
# 3450 "event.c"
evcb_active_next
# 3450 "event.c" 3 4
.tqe_prev = (
# 3450 "event.c"
&base->activequeues[evcb->evcb_pri]
# 3450 "event.c" 3 4
)->tqh_last; *(
# 3450 "event.c"
&base->activequeues[evcb->evcb_pri]
# 3450 "event.c" 3 4
)->tqh_last = (
# 3450 "event.c"
evcb
# 3450 "event.c" 3 4
); (
# 3450 "event.c"
&base->activequeues[evcb->evcb_pri]
# 3450 "event.c" 3 4
)->tqh_last = &(
# 3450 "event.c"
evcb
# 3450 "event.c" 3 4
)->
# 3450 "event.c"
evcb_active_next
# 3450 "event.c" 3 4
.tqe_next; } while ( 0)
                            
# 3451 "event.c"
                           ;
}

static void
event_queue_insert_active_later(struct event_base *base, struct event_callback *evcb)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3457,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3457 "event.c" 3 4
stderr
# 3457 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3457,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);
 if (evcb->evcb_flags & (0x20|0x08)) {

  return;
 }

 do { ((base)->event_count += !((evcb->evcb_flags) & 0x10)); (base)->event_count_max = ((((base)->event_count_max)>((base)->event_count))?((base)->event_count_max):((base)->event_count)); } while (0);
 evcb->evcb_flags |= 0x20;
 base->event_count_active++;
 base->event_count_active_max = (((base->event_count_active_max)>(base->event_count_active))?(base->event_count_active_max):(base->event_count_active));
 do { if (__builtin_expect(!!(!(evcb->evcb_pri < base->nactivequeues)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3467,"evcb->evcb_pri < base->nactivequeues",__func__); (void)fprintf(
# 3467 "event.c" 3 4
stderr
# 3467 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3467,"evcb->evcb_pri < base->nactivequeues",__func__); abort(); } } while (0);
 
# 3468 "event.c" 3 4
do { (
# 3468 "event.c"
evcb
# 3468 "event.c" 3 4
)->
# 3468 "event.c"
evcb_active_next
# 3468 "event.c" 3 4
.tqe_next = ((void *)0); (
# 3468 "event.c"
evcb
# 3468 "event.c" 3 4
)->
# 3468 "event.c"
evcb_active_next
# 3468 "event.c" 3 4
.tqe_prev = (
# 3468 "event.c"
&base->active_later_queue
# 3468 "event.c" 3 4
)->tqh_last; *(
# 3468 "event.c"
&base->active_later_queue
# 3468 "event.c" 3 4
)->tqh_last = (
# 3468 "event.c"
evcb
# 3468 "event.c" 3 4
); (
# 3468 "event.c"
&base->active_later_queue
# 3468 "event.c" 3 4
)->tqh_last = &(
# 3468 "event.c"
evcb
# 3468 "event.c" 3 4
)->
# 3468 "event.c"
evcb_active_next
# 3468 "event.c" 3 4
.tqe_next; } while ( 0)
# 3468 "event.c"
                                                                    ;
}

static void
event_queue_insert_timeout(struct event_base *base, struct event *ev)
{
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3474,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3474 "event.c" 3 4
stderr
# 3474 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3474,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);

 if (__builtin_expect(!!(ev->ev_evcallback.evcb_flags & 0x01),0)) {
  event_errx(1, "%s: %p(fd ""%d"") already on timeout", __func__,
      ev, (ev->ev_fd));
  return;
 }

 do { ((base)->event_count += !((ev->ev_evcallback.evcb_flags) & 0x10)); (base)->event_count_max = ((((base)->event_count_max)>((base)->event_count))?((base)->event_count_max):((base)->event_count)); } while (0);

 ev->ev_evcallback.evcb_flags |= 0x01;

 if (is_common_timeout(&ev->ev_timeout, base)) {
  struct common_timeout_list *ctl =
      get_common_timeout_list(base, &ev->ev_timeout);
  insert_common_timeout_inorder(ctl, ev);
 } else {
  min_heap_push_(&base->timeheap, ev);
 }
}

static void
event_queue_make_later_events_active(struct event_base *base)
{
 struct event_callback *evcb;
 do { if (((base)->th_base_lock) && evthread_lock_debugging_enabled_) { do { if (__builtin_expect(!!(!(evthread_is_debug_lock_held_((base)->th_base_lock))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3499,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); (void)fprintf(
# 3499 "event.c" 3 4
stderr
# 3499 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3499,"evthread_is_debug_lock_held_((base)->th_base_lock)",__func__); abort(); } } while (0); } } while (0);

 while ((evcb = 
# 3501 "event.c" 3 4
               ((
# 3501 "event.c"
               &base->active_later_queue
# 3501 "event.c" 3 4
               )->tqh_first)
# 3501 "event.c"
                                                     )) {
  
# 3502 "event.c" 3 4
 do { if (((
# 3502 "event.c"
 evcb
# 3502 "event.c" 3 4
 )->
# 3502 "event.c"
 evcb_active_next
# 3502 "event.c" 3 4
 .tqe_next) != ((void *)0)) (
# 3502 "event.c"
 evcb
# 3502 "event.c" 3 4
 )->
# 3502 "event.c"
 evcb_active_next
# 3502 "event.c" 3 4
 .tqe_next->
# 3502 "event.c"
 evcb_active_next
# 3502 "event.c" 3 4
 .tqe_prev = (
# 3502 "event.c"
 evcb
# 3502 "event.c" 3 4
 )->
# 3502 "event.c"
 evcb_active_next
# 3502 "event.c" 3 4
 .tqe_prev; else (
# 3502 "event.c"
 &base->active_later_queue
# 3502 "event.c" 3 4
 )->tqh_last = (
# 3502 "event.c"
 evcb
# 3502 "event.c" 3 4
 )->
# 3502 "event.c"
 evcb_active_next
# 3502 "event.c" 3 4
 .tqe_prev; *(
# 3502 "event.c"
 evcb
# 3502 "event.c" 3 4
 )->
# 3502 "event.c"
 evcb_active_next
# 3502 "event.c" 3 4
 .tqe_prev = (
# 3502 "event.c"
 evcb
# 3502 "event.c" 3 4
 )->
# 3502 "event.c"
 evcb_active_next
# 3502 "event.c" 3 4
 .tqe_next; } while ( 0)
# 3502 "event.c"
                                                                ;
  evcb->evcb_flags = (evcb->evcb_flags & ~0x20) | 0x08;
  do { if (__builtin_expect(!!(!(evcb->evcb_pri < base->nactivequeues)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3504,"evcb->evcb_pri < base->nactivequeues",__func__); (void)fprintf(
# 3504 "event.c" 3 4
 stderr
# 3504 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",3504,"evcb->evcb_pri < base->nactivequeues",__func__); abort(); } } while (0);
  
# 3505 "event.c" 3 4
 do { (
# 3505 "event.c"
 evcb
# 3505 "event.c" 3 4
 )->
# 3505 "event.c"
 evcb_active_next
# 3505 "event.c" 3 4
 .tqe_next = ((void *)0); (
# 3505 "event.c"
 evcb
# 3505 "event.c" 3 4
 )->
# 3505 "event.c"
 evcb_active_next
# 3505 "event.c" 3 4
 .tqe_prev = (
# 3505 "event.c"
 &base->activequeues[evcb->evcb_pri]
# 3505 "event.c" 3 4
 )->tqh_last; *(
# 3505 "event.c"
 &base->activequeues[evcb->evcb_pri]
# 3505 "event.c" 3 4
 )->tqh_last = (
# 3505 "event.c"
 evcb
# 3505 "event.c" 3 4
 ); (
# 3505 "event.c"
 &base->activequeues[evcb->evcb_pri]
# 3505 "event.c" 3 4
 )->tqh_last = &(
# 3505 "event.c"
 evcb
# 3505 "event.c" 3 4
 )->
# 3505 "event.c"
 evcb_active_next
# 3505 "event.c" 3 4
 .tqe_next; } while ( 0)
# 3505 "event.c"
                                                                               ;
  base->n_deferreds_queued += (evcb->evcb_closure == 3);
 }
}



const char *
event_get_version(void)
{
 return ("2.1.11-stable");
}

uint32_t
event_get_version_number(void)
{
 return (0x02010b00);
}






const char *
event_get_method(void)
{
 return (event_global_current_base_->evsel->name);
}


static void *(*mm_malloc_fn_)(size_t sz) = 
# 3536 "event.c" 3 4
                                          ((void *)0)
# 3536 "event.c"
                                              ;
static void *(*mm_realloc_fn_)(void *p, size_t sz) = 
# 3537 "event.c" 3 4
                                                    ((void *)0)
# 3537 "event.c"
                                                        ;
static void (*mm_free_fn_)(void *p) = 
# 3538 "event.c" 3 4
                                     ((void *)0)
# 3538 "event.c"
                                         ;

void *
event_mm_malloc_(size_t sz)
{
 if (sz == 0)
  return 
# 3544 "event.c" 3 4
        ((void *)0)
# 3544 "event.c"
            ;

 if (mm_malloc_fn_)
  return mm_malloc_fn_(sz);
 else
  return malloc(sz);
}

void *
event_mm_calloc_(size_t count, size_t size)
{
 if (count == 0 || size == 0)
  return 
# 3556 "event.c" 3 4
        ((void *)0)
# 3556 "event.c"
            ;

 if (mm_malloc_fn_) {
  size_t sz = count * size;
  void *p = 
# 3560 "event.c" 3 4
           ((void *)0)
# 3560 "event.c"
               ;
  if (count > 
# 3561 "event.c" 3 4
             (18446744073709551615UL) 
# 3561 "event.c"
                         / size)
   goto error;
  p = mm_malloc_fn_(sz);
  if (p)
   return memset(p, 0, sz);
 } else {
  void *p = calloc(count, size);





  return p;
 }

error:
 
# 3577 "event.c" 3 4
(*__errno_location ()) 
# 3577 "event.c"
      = 
# 3577 "event.c" 3 4
        12
# 3577 "event.c"
              ;
 return 
# 3578 "event.c" 3 4
       ((void *)0)
# 3578 "event.c"
           ;
}

char *
event_mm_strdup_(const char *str)
{
 if (!str) {
  
# 3585 "event.c" 3 4
 (*__errno_location ()) 
# 3585 "event.c"
       = 
# 3585 "event.c" 3 4
         22
# 3585 "event.c"
               ;
  return 
# 3586 "event.c" 3 4
        ((void *)0)
# 3586 "event.c"
            ;
 }

 if (mm_malloc_fn_) {
  size_t ln = strlen(str);
  void *p = 
# 3591 "event.c" 3 4
           ((void *)0)
# 3591 "event.c"
               ;
  if (ln == 
# 3592 "event.c" 3 4
           (18446744073709551615UL)
# 3592 "event.c"
                      )
   goto error;
  p = mm_malloc_fn_(ln+1);
  if (p)
   return memcpy(p, str, ln+1);
 } else



  return strdup(str);


error:
 
# 3605 "event.c" 3 4
(*__errno_location ()) 
# 3605 "event.c"
      = 
# 3605 "event.c" 3 4
        12
# 3605 "event.c"
              ;
 return 
# 3606 "event.c" 3 4
       ((void *)0)
# 3606 "event.c"
           ;
}

void *
event_mm_realloc_(void *ptr, size_t sz)
{
 if (mm_realloc_fn_)
  return mm_realloc_fn_(ptr, sz);
 else
  return realloc(ptr, sz);
}

void
event_mm_free_(void *ptr)
{
 if (mm_free_fn_)
  mm_free_fn_(ptr);
 else
  free(ptr);
}

void
event_set_mem_functions(void *(*malloc_fn)(size_t sz),
   void *(*realloc_fn)(void *ptr, size_t sz),
   void (*free_fn)(void *ptr))
{
 mm_malloc_fn_ = malloc_fn;
 mm_realloc_fn_ = realloc_fn;
 mm_free_fn_ = free_fn;
}



static void
evthread_notify_drain_eventfd(int fd, short what, void *arg)
{
 uint64_t msg;
 ssize_t r;
 struct event_base *base = arg;

 r = read(fd, (void*) &msg, sizeof(msg));
 if (r<0 && 
# 3647 "event.c" 3 4
           (*__errno_location ()) 
# 3647 "event.c"
                 != 
# 3647 "event.c" 3 4
                    11
# 3647 "event.c"
                          ) {
  event_sock_warn(fd, "Error reading from eventfd");
 }
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 base->is_notify_pending = 0;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}


static void
evthread_notify_drain_default(int fd, short what, void *arg)
{
 unsigned char buf[1024];
 struct event_base *base = arg;




 while (read(fd, (char*)buf, sizeof(buf)) > 0)
  ;


 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 base->is_notify_pending = 0;
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}

int
evthread_make_base_notifiable(struct event_base *base)
{
 int r;
 if (!base)
  return -1;

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 r = evthread_make_base_notifiable_nolock_(base);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return r;
}

static int
evthread_make_base_notifiable_nolock_(struct event_base *base)
{
 void (*cb)(int, short, void *);
 int (*notify)(struct event_base *);

 if (base->th_notify_fn != 
# 3693 "event.c" 3 4
                          ((void *)0)
# 3693 "event.c"
                              ) {

  return 0;
 }
# 3708 "event.c"
 base->th_notify_fd[0] = evutil_eventfd_(0,
     
# 3709 "event.c" 3 4
    EFD_CLOEXEC
# 3709 "event.c"
                      |
# 3709 "event.c" 3 4
                       EFD_NONBLOCK
# 3709 "event.c"
                                          );
 if (base->th_notify_fd[0] >= 0) {
  base->th_notify_fd[1] = -1;
  notify = evthread_notify_base_eventfd;
  cb = evthread_notify_drain_eventfd;
 } else

 if (evutil_make_internal_pipe_(base->th_notify_fd) == 0) {
  notify = evthread_notify_base_default;
  cb = evthread_notify_drain_default;
 } else {
  return -1;
 }

 base->th_notify_fn = notify;


 event_assign(&base->th_notify, base, base->th_notify_fd[0],
     0x02|0x10, cb, base);


 base->th_notify.ev_evcallback.evcb_flags |= 0x10;
 event_priority_set(&base->th_notify, 0);

 return event_add_nolock_(&base->th_notify, 
# 3733 "event.c" 3 4
                                           ((void *)0)
# 3733 "event.c"
                                               , 0);
}

int
event_base_foreach_event_nolock_(struct event_base *base,
    event_base_foreach_event_cb fn, void *arg)
{
 int r, i;
 unsigned u;
 struct event *ev;


 if ((r = evmap_foreach_event_(base, fn, arg)))
  return r;



 for (u = 0; u < base->timeheap.n; ++u) {
  ev = base->timeheap.p[u];
  if (ev->ev_evcallback.evcb_flags & 0x02) {

   continue;
  }
  if ((r = fn(base, ev, arg)))
   return r;
 }



 for (i = 0; i < base->n_common_timeouts; ++i) {
  struct common_timeout_list *ctl =
      base->common_timeout_queues[i];
  
# 3765 "event.c" 3 4
 for ((
# 3765 "event.c"
 ev
# 3765 "event.c" 3 4
 ) = ((
# 3765 "event.c"
 &ctl->events
# 3765 "event.c" 3 4
 )->tqh_first); (
# 3765 "event.c"
 ev
# 3765 "event.c" 3 4
 ); (
# 3765 "event.c"
 ev
# 3765 "event.c" 3 4
 ) = ((
# 3765 "event.c"
 ev
# 3765 "event.c" 3 4
 )->
# 3765 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 3765 "event.c" 3 4
 .tqe_next))
                                                  
# 3766 "event.c"
                                                 {
   if (ev->ev_evcallback.evcb_flags & 0x02) {

    continue;
   }
   if ((r = fn(base, ev, arg)))
    return r;
  }
 }



 for (i = 0; i < base->nactivequeues; ++i) {
  struct event_callback *evcb;
  
# 3780 "event.c" 3 4
 for ((
# 3780 "event.c"
 evcb
# 3780 "event.c" 3 4
 ) = ((
# 3780 "event.c"
 &base->activequeues[i]
# 3780 "event.c" 3 4
 )->tqh_first); (
# 3780 "event.c"
 evcb
# 3780 "event.c" 3 4
 ); (
# 3780 "event.c"
 evcb
# 3780 "event.c" 3 4
 ) = ((
# 3780 "event.c"
 evcb
# 3780 "event.c" 3 4
 )->
# 3780 "event.c"
 evcb_active_next
# 3780 "event.c" 3 4
 .tqe_next)) 
# 3780 "event.c"
                                                               {
   if ((evcb->evcb_flags & (0x80|0x02|0x01)) != 0x80) {



    continue;
   }
   ev = event_callback_to_event(evcb);
   if ((r = fn(base, ev, arg)))
    return r;
  }
 }

 return 0;
}



static int
dump_inserted_event_fn(const struct event_base *base, const struct event *e, void *arg)
{
 FILE *output = arg;
 const char *gloss = (e->ev_events & 0x08) ?
     "sig" : "fd ";

 if (! (e->ev_evcallback.evcb_flags & (0x02|0x01)))
  return 0;

 fprintf(output, "  %p [%s ""%d""]%s%s%s%s%s%s%s",
     (void*)e, gloss, (e->ev_fd),
     (e->ev_events&0x02)?" Read":"",
     (e->ev_events&0x04)?" Write":"",
     (e->ev_events&0x80)?" EOF":"",
     (e->ev_events&0x08)?" Signal":"",
     (e->ev_events&0x10)?" Persist":"",
     (e->ev_events&0x20)?" ET":"",
     (e->ev_evcallback.evcb_flags&0x10)?" Internal":"");
 if (e->ev_evcallback.evcb_flags & 0x01) {
  struct timeval tv;
  tv.tv_sec = e->ev_timeout.tv_sec;
  tv.tv_usec = e->ev_timeout.tv_usec & 0x000fffff;
  
# 3821 "event.c" 3 4
 do { (
# 3821 "event.c"
 (&tv)
# 3821 "event.c" 3 4
 )->tv_sec = (
# 3821 "event.c"
 (&tv)
# 3821 "event.c" 3 4
 )->tv_sec + (
# 3821 "event.c"
 (&base->tv_clock_diff)
# 3821 "event.c" 3 4
 )->tv_sec; (
# 3821 "event.c"
 (&tv)
# 3821 "event.c" 3 4
 )->tv_usec = (
# 3821 "event.c"
 (&tv)
# 3821 "event.c" 3 4
 )->tv_usec + (
# 3821 "event.c"
 (&base->tv_clock_diff)
# 3821 "event.c" 3 4
 )->tv_usec; if ((
# 3821 "event.c"
 (&tv)
# 3821 "event.c" 3 4
 )->tv_usec >= 1000000) { ++(
# 3821 "event.c"
 (&tv)
# 3821 "event.c" 3 4
 )->tv_sec; (
# 3821 "event.c"
 (&tv)
# 3821 "event.c" 3 4
 )->tv_usec -= 1000000; } } while (0)
# 3821 "event.c"
                                                ;
  fprintf(output, " Timeout=%ld.%06d",
      (long)tv.tv_sec, (int)(tv.tv_usec & 0x000fffff));
 }
 fputc('\n', output);

 return 0;
}



static int
dump_active_event_fn(const struct event_base *base, const struct event *e, void *arg)
{
 FILE *output = arg;
 const char *gloss = (e->ev_events & 0x08) ?
     "sig" : "fd ";

 if (! (e->ev_evcallback.evcb_flags & (0x08|0x20)))
  return 0;

 fprintf(output, "  %p [%s ""%d"", priority=%d]%s%s%s%s%s active%s%s\n",
     (void*)e, gloss, (e->ev_fd), e->ev_evcallback.evcb_pri,
     (e->ev_res&0x02)?" Read":"",
     (e->ev_res&0x04)?" Write":"",
     (e->ev_res&0x80)?" EOF":"",
     (e->ev_res&0x08)?" Signal":"",
     (e->ev_res&0x01)?" Timeout":"",
     (e->ev_evcallback.evcb_flags&0x10)?" [Internal]":"",
     (e->ev_evcallback.evcb_flags&0x20)?" [NextTime]":"");

 return 0;
}

int
event_base_foreach_event(struct event_base *base,
    event_base_foreach_event_cb fn, void *arg)
{
 int r;
 if ((!fn) || (!base)) {
  return -1;
 }
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 r = event_base_foreach_event_nolock_(base, fn, arg);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
 return r;
}


void
event_base_dump_events(struct event_base *base, FILE *output)
{
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 fprintf(output, "Inserted events:\n");
 event_base_foreach_event_nolock_(base, dump_inserted_event_fn, output);

 fprintf(output, "Active events:\n");
 event_base_foreach_event_nolock_(base, dump_active_event_fn, output);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}

void
event_base_active_by_fd(struct event_base *base, int fd, short events)
{
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);


 if (!(events & 0x01)) {
  evmap_io_active_(base, fd, events & (0x02|0x04|0x80));
 } else {


  int i;
  unsigned u;
  struct event *ev;

  for (u = 0; u < base->timeheap.n; ++u) {
   ev = base->timeheap.p[u];
   if (ev->ev_fd == fd) {
    event_active_nolock_(ev, 0x01, 1);
   }
  }

  for (i = 0; i < base->n_common_timeouts; ++i) {
   struct common_timeout_list *ctl = base->common_timeout_queues[i];
   
# 3906 "event.c" 3 4
  for ((
# 3906 "event.c"
  ev
# 3906 "event.c" 3 4
  ) = ((
# 3906 "event.c"
  &ctl->events
# 3906 "event.c" 3 4
  )->tqh_first); (
# 3906 "event.c"
  ev
# 3906 "event.c" 3 4
  ); (
# 3906 "event.c"
  ev
# 3906 "event.c" 3 4
  ) = ((
# 3906 "event.c"
  ev
# 3906 "event.c" 3 4
  )->
# 3906 "event.c"
  ev_timeout_pos.ev_next_with_common_timeout
# 3906 "event.c" 3 4
  .tqe_next))
                                                
# 3907 "event.c"
                                               {
    if (ev->ev_fd == fd) {
     event_active_nolock_(ev, 0x01, 1);
    }
   }
  }
 }

 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}

void
event_base_active_by_signal(struct event_base *base, int sig)
{
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 evmap_signal_active_(base, sig, 1);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}


void
event_base_add_virtual_(struct event_base *base)
{
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 base->virtual_event_count++;
 base->virtual_event_count_max = (((base->virtual_event_count_max)>(base->virtual_event_count))?(base->virtual_event_count_max):(base->virtual_event_count));
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}

void
event_base_del_virtual_(struct event_base *base)
{
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 do { if (__builtin_expect(!!(!(base->virtual_event_count > 0)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",3940,"base->virtual_event_count > 0",__func__); (void)fprintf(
# 3940 "event.c" 3 4
stderr
# 3940 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",3940,"base->virtual_event_count > 0",__func__); abort(); } } while (0);
 base->virtual_event_count--;
 if (base->virtual_event_count == 0 && (evthread_id_fn_ != 
# 3942 "event.c" 3 4
                                      ((void *)0) 
# 3942 "event.c"
                                      && (base)->running_loop && (base)->th_owner_id != evthread_id_fn_()))
  evthread_notify_base(base);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}

static void
event_free_debug_globals_locks(void)
{


 if (event_debug_map_lock_ != 
# 3952 "event.c" 3 4
                             ((void *)0)
# 3952 "event.c"
                                 ) {
  do { void *lock_tmp_ = (event_debug_map_lock_); if (lock_tmp_ && evthread_lock_fns_.free) evthread_lock_fns_.free(lock_tmp_, (0)); } while (0);
  event_debug_map_lock_ = 
# 3954 "event.c" 3 4
                         ((void *)0)
# 3954 "event.c"
                             ;
  evthreadimpl_disable_lock_debugging_();
 }


 return;
}

static void
event_free_debug_globals(void)
{
 event_free_debug_globals_locks();
}

static void
event_free_evsig_globals(void)
{
 evsig_free_globals_();
}

static void
event_free_evutil_globals(void)
{
 evutil_free_globals_();
}

static void
event_free_globals(void)
{
 event_free_debug_globals();
 event_free_evsig_globals();
 event_free_evutil_globals();
}

void
libevent_global_shutdown(void)
{
 event_disable_debug_mode();
 event_free_globals();
}


int
event_global_setup_locks_(const int enable_locks)
{

 do { event_debug_map_lock_ = evthread_setup_global_lock_(event_debug_map_lock_, (0), enable_locks); if (!event_debug_map_lock_) { event_warn("Couldn't allocate %s", "event_debug_map_lock_"); return -1; } } while (0);;

 if (evsig_global_setup_locks_(enable_locks) < 0)
  return -1;
 if (evutil_global_setup_locks_(enable_locks) < 0)
  return -1;
 if (evutil_secure_rng_global_setup_locks_(enable_locks) < 0)
  return -1;
 return 0;
}


void
event_base_assert_ok_(struct event_base *base)
{
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.lock(0, (base)->th_base_lock); } while (0); } while (0);
 event_base_assert_ok_nolock_(base);
 do { do { if ((base)->th_base_lock) evthread_lock_fns_.unlock(0, (base)->th_base_lock); } while (0); } while (0);
}

void
event_base_assert_ok_nolock_(struct event_base *base)
{
 int i;
 int count;


 evmap_check_integrity_(base);


 for (i = 1; i < (int)base->timeheap.n; ++i) {
  int parent = (i - 1) / 2;
  struct event *ev, *p_ev;
  ev = base->timeheap.p[i];
  p_ev = base->timeheap.p[parent];
  do { if (__builtin_expect(!!(!(ev->ev_evcallback.evcb_flags & 0x01)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4035,"ev->ev_flags & EVLIST_TIMEOUT",__func__); (void)fprintf(
# 4035 "event.c" 3 4
 stderr
# 4035 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4035,"ev->ev_flags & EVLIST_TIMEOUT",__func__); abort(); } } while (0);
  do { if (__builtin_expect(!!(!((((&p_ev->ev_timeout)->tv_sec == (&ev->ev_timeout)->tv_sec) ? ((&p_ev->ev_timeout)->tv_usec <= (&ev->ev_timeout)->tv_usec) : ((&p_ev->ev_timeout)->tv_sec <= (&ev->ev_timeout)->tv_sec)))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4036,"evutil_timercmp(&p_ev->ev_timeout, &ev->ev_timeout, <=)",__func__); (void)fprintf(
# 4036 "event.c" 3 4
 stderr
# 4036 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4036,"evutil_timercmp(&p_ev->ev_timeout, &ev->ev_timeout, <=)",__func__); abort(); } } while (0);
  do { if (__builtin_expect(!!(!(ev->ev_timeout_pos.min_heap_idx == i)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4037,"ev->ev_timeout_pos.min_heap_idx == i",__func__); (void)fprintf(
# 4037 "event.c" 3 4
 stderr
# 4037 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4037,"ev->ev_timeout_pos.min_heap_idx == i",__func__); abort(); } } while (0);
 }


 for (i = 0; i < base->n_common_timeouts; ++i) {
  struct common_timeout_list *ctl = base->common_timeout_queues[i];
  struct event *last=
# 4043 "event.c" 3 4
                    ((void *)0)
# 4043 "event.c"
                        , *ev;

  do { struct event *elm1, *elm2, **nextp; if (
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 (&ctl->events)
# 4045 "event.c" 3 4
 )->tqh_first == ((void *)0))
# 4045 "event.c"
 ) break; elm1 = 
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 (&ctl->events)
# 4045 "event.c" 3 4
 )->tqh_first)
# 4045 "event.c"
 ; elm2 = 
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 elm1
# 4045 "event.c" 3 4
 )->
# 4045 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 4045 "event.c" 3 4
 .tqe_next)
# 4045 "event.c"
 ; while (elm1 && elm2) { do { if (__builtin_expect(!!(!(elm1 != elm2)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4045,"elm1 != elm2",__func__); (void)fprintf(
# 4045 "event.c" 3 4
 stderr
# 4045 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4045,"elm1 != elm2",__func__); abort(); } } while (0); elm1 = 
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 elm1
# 4045 "event.c" 3 4
 )->
# 4045 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 4045 "event.c" 3 4
 .tqe_next)
# 4045 "event.c"
 ; elm2 = 
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 elm2
# 4045 "event.c" 3 4
 )->
# 4045 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 4045 "event.c" 3 4
 .tqe_next)
# 4045 "event.c"
 ; if (!elm2) break; do { if (__builtin_expect(!!(!(elm1 != elm2)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4045,"elm1 != elm2",__func__); (void)fprintf(
# 4045 "event.c" 3 4
 stderr
# 4045 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4045,"elm1 != elm2",__func__); abort(); } } while (0); elm2 = 
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 elm2
# 4045 "event.c" 3 4
 )->
# 4045 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 4045 "event.c" 3 4
 .tqe_next)
# 4045 "event.c"
 ; } nextp = &
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 (&ctl->events)
# 4045 "event.c" 3 4
 )->tqh_first)
# 4045 "event.c"
 ; elm1 = 
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 (&ctl->events)
# 4045 "event.c" 3 4
 )->tqh_first)
# 4045 "event.c"
 ; while (elm1) { do { if (__builtin_expect(!!(!(*nextp == elm1)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4045,"*nextp == elm1",__func__); (void)fprintf(
# 4045 "event.c" 3 4
 stderr
# 4045 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4045,"*nextp == elm1",__func__); abort(); } } while (0); do { if (__builtin_expect(!!(!(nextp == elm1->ev_timeout_pos.ev_next_with_common_timeout.tqe_prev)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4045,"nextp == elm1->ev_timeout_pos.ev_next_with_common_timeout.tqe_prev",__func__); (void)fprintf(
# 4045 "event.c" 3 4
 stderr
# 4045 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4045,"nextp == elm1->ev_timeout_pos.ev_next_with_common_timeout.tqe_prev",__func__); abort(); } } while (0); nextp = &
# 4045 "event.c" 3 4
 ((
# 4045 "event.c"
 elm1
# 4045 "event.c" 3 4
 )->
# 4045 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 4045 "event.c" 3 4
 .tqe_next)
# 4045 "event.c"
 ; elm1 = *nextp; } do { if (__builtin_expect(!!(!(nextp == (&ctl->events)->tqh_last)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4045,"nextp == (&ctl->events)->tqh_last",__func__); (void)fprintf(
# 4045 "event.c" 3 4
 stderr
# 4045 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4045,"nextp == (&ctl->events)->tqh_last",__func__); abort(); } } while (0); } while (0);

  
# 4047 "event.c" 3 4
 for ((
# 4047 "event.c"
 ev
# 4047 "event.c" 3 4
 ) = ((
# 4047 "event.c"
 &ctl->events
# 4047 "event.c" 3 4
 )->tqh_first); (
# 4047 "event.c"
 ev
# 4047 "event.c" 3 4
 ); (
# 4047 "event.c"
 ev
# 4047 "event.c" 3 4
 ) = ((
# 4047 "event.c"
 ev
# 4047 "event.c" 3 4
 )->
# 4047 "event.c"
 ev_timeout_pos.ev_next_with_common_timeout
# 4047 "event.c" 3 4
 .tqe_next)) 
# 4047 "event.c"
                                                                             {
   if (last)
    do { if (__builtin_expect(!!(!((((&last->ev_timeout)->tv_sec == (&ev->ev_timeout)->tv_sec) ? ((&last->ev_timeout)->tv_usec <= (&ev->ev_timeout)->tv_usec) : ((&last->ev_timeout)->tv_sec <= (&ev->ev_timeout)->tv_sec)))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4049,"evutil_timercmp(&last->ev_timeout, &ev->ev_timeout, <=)",__func__); (void)fprintf(
# 4049 "event.c" 3 4
   stderr
# 4049 "event.c"
   , "%s:%d: Assertion %s failed in %s", "event.c",4049,"evutil_timercmp(&last->ev_timeout, &ev->ev_timeout, <=)",__func__); abort(); } } while (0);
   do { if (__builtin_expect(!!(!(ev->ev_evcallback.evcb_flags & 0x01)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4050,"ev->ev_flags & EVLIST_TIMEOUT",__func__); (void)fprintf(
# 4050 "event.c" 3 4
  stderr
# 4050 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",4050,"ev->ev_flags & EVLIST_TIMEOUT",__func__); abort(); } } while (0);
   do { if (__builtin_expect(!!(!(is_common_timeout(&ev->ev_timeout,base))),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4051,"is_common_timeout(&ev->ev_timeout,base)",__func__); (void)fprintf(
# 4051 "event.c" 3 4
  stderr
# 4051 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",4051,"is_common_timeout(&ev->ev_timeout,base)",__func__); abort(); } } while (0);
   do { if (__builtin_expect(!!(!((((&ev->ev_timeout)->tv_usec & 0x0ff00000)>>20) == i)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4052,"COMMON_TIMEOUT_IDX(&ev->ev_timeout) == i",__func__); (void)fprintf(
# 4052 "event.c" 3 4
  stderr
# 4052 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",4052,"COMMON_TIMEOUT_IDX(&ev->ev_timeout) == i",__func__); abort(); } } while (0);
   last = ev;
  }
 }


 count = 0;
 for (i = 0; i < base->nactivequeues; ++i) {
  struct event_callback *evcb;
  do { struct event_callback *elm1, *elm2, **nextp; if (
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 (&base->activequeues[i])
# 4061 "event.c" 3 4
 )->tqh_first == ((void *)0))
# 4061 "event.c"
 ) break; elm1 = 
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 (&base->activequeues[i])
# 4061 "event.c" 3 4
 )->tqh_first)
# 4061 "event.c"
 ; elm2 = 
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 elm1
# 4061 "event.c" 3 4
 )->
# 4061 "event.c"
 evcb_active_next
# 4061 "event.c" 3 4
 .tqe_next)
# 4061 "event.c"
 ; while (elm1 && elm2) { do { if (__builtin_expect(!!(!(elm1 != elm2)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4061,"elm1 != elm2",__func__); (void)fprintf(
# 4061 "event.c" 3 4
 stderr
# 4061 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4061,"elm1 != elm2",__func__); abort(); } } while (0); elm1 = 
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 elm1
# 4061 "event.c" 3 4
 )->
# 4061 "event.c"
 evcb_active_next
# 4061 "event.c" 3 4
 .tqe_next)
# 4061 "event.c"
 ; elm2 = 
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 elm2
# 4061 "event.c" 3 4
 )->
# 4061 "event.c"
 evcb_active_next
# 4061 "event.c" 3 4
 .tqe_next)
# 4061 "event.c"
 ; if (!elm2) break; do { if (__builtin_expect(!!(!(elm1 != elm2)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4061,"elm1 != elm2",__func__); (void)fprintf(
# 4061 "event.c" 3 4
 stderr
# 4061 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4061,"elm1 != elm2",__func__); abort(); } } while (0); elm2 = 
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 elm2
# 4061 "event.c" 3 4
 )->
# 4061 "event.c"
 evcb_active_next
# 4061 "event.c" 3 4
 .tqe_next)
# 4061 "event.c"
 ; } nextp = &
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 (&base->activequeues[i])
# 4061 "event.c" 3 4
 )->tqh_first)
# 4061 "event.c"
 ; elm1 = 
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 (&base->activequeues[i])
# 4061 "event.c" 3 4
 )->tqh_first)
# 4061 "event.c"
 ; while (elm1) { do { if (__builtin_expect(!!(!(*nextp == elm1)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4061,"*nextp == elm1",__func__); (void)fprintf(
# 4061 "event.c" 3 4
 stderr
# 4061 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4061,"*nextp == elm1",__func__); abort(); } } while (0); do { if (__builtin_expect(!!(!(nextp == elm1->evcb_active_next.tqe_prev)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4061,"nextp == elm1->evcb_active_next.tqe_prev",__func__); (void)fprintf(
# 4061 "event.c" 3 4
 stderr
# 4061 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4061,"nextp == elm1->evcb_active_next.tqe_prev",__func__); abort(); } } while (0); nextp = &
# 4061 "event.c" 3 4
 ((
# 4061 "event.c"
 elm1
# 4061 "event.c" 3 4
 )->
# 4061 "event.c"
 evcb_active_next
# 4061 "event.c" 3 4
 .tqe_next)
# 4061 "event.c"
 ; elm1 = *nextp; } do { if (__builtin_expect(!!(!(nextp == (&base->activequeues[i])->tqh_last)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4061,"nextp == (&base->activequeues[i])->tqh_last",__func__); (void)fprintf(
# 4061 "event.c" 3 4
 stderr
# 4061 "event.c"
 , "%s:%d: Assertion %s failed in %s", "event.c",4061,"nextp == (&base->activequeues[i])->tqh_last",__func__); abort(); } } while (0); } while (0);
  
# 4062 "event.c" 3 4
 for ((
# 4062 "event.c"
 evcb
# 4062 "event.c" 3 4
 ) = ((
# 4062 "event.c"
 &base->activequeues[i]
# 4062 "event.c" 3 4
 )->tqh_first); (
# 4062 "event.c"
 evcb
# 4062 "event.c" 3 4
 ); (
# 4062 "event.c"
 evcb
# 4062 "event.c" 3 4
 ) = ((
# 4062 "event.c"
 evcb
# 4062 "event.c" 3 4
 )->
# 4062 "event.c"
 evcb_active_next
# 4062 "event.c" 3 4
 .tqe_next)) 
# 4062 "event.c"
                                                               {
   do { if (__builtin_expect(!!(!((evcb->evcb_flags & (0x08|0x20)) == 0x08)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4063,"(evcb->evcb_flags & (EVLIST_ACTIVE|EVLIST_ACTIVE_LATER)) == EVLIST_ACTIVE",__func__); (void)fprintf(
# 4063 "event.c" 3 4
  stderr
# 4063 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",4063,"(evcb->evcb_flags & (EVLIST_ACTIVE|EVLIST_ACTIVE_LATER)) == EVLIST_ACTIVE",__func__); abort(); } } while (0);
   do { if (__builtin_expect(!!(!(evcb->evcb_pri == i)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4064,"evcb->evcb_pri == i",__func__); (void)fprintf(
# 4064 "event.c" 3 4
  stderr
# 4064 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",4064,"evcb->evcb_pri == i",__func__); abort(); } } while (0);
   ++count;
  }
 }

 {
  struct event_callback *evcb;
  
# 4071 "event.c" 3 4
 for ((
# 4071 "event.c"
 evcb
# 4071 "event.c" 3 4
 ) = ((
# 4071 "event.c"
 &base->active_later_queue
# 4071 "event.c" 3 4
 )->tqh_first); (
# 4071 "event.c"
 evcb
# 4071 "event.c" 3 4
 ); (
# 4071 "event.c"
 evcb
# 4071 "event.c" 3 4
 ) = ((
# 4071 "event.c"
 evcb
# 4071 "event.c" 3 4
 )->
# 4071 "event.c"
 evcb_active_next
# 4071 "event.c" 3 4
 .tqe_next)) 
# 4071 "event.c"
                                                                  {
   do { if (__builtin_expect(!!(!((evcb->evcb_flags & (0x08|0x20)) == 0x20)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4072,"(evcb->evcb_flags & (EVLIST_ACTIVE|EVLIST_ACTIVE_LATER)) == EVLIST_ACTIVE_LATER",__func__); (void)fprintf(
# 4072 "event.c" 3 4
  stderr
# 4072 "event.c"
  , "%s:%d: Assertion %s failed in %s", "event.c",4072,"(evcb->evcb_flags & (EVLIST_ACTIVE|EVLIST_ACTIVE_LATER)) == EVLIST_ACTIVE_LATER",__func__); abort(); } } while (0);
   ++count;
  }
 }
 do { if (__builtin_expect(!!(!(count == base->event_count_active)),0)) { event_errx(((int)0xdeaddead), "%s:%d: Assertion %s failed in %s", "event.c",4076,"count == base->event_count_active",__func__); (void)fprintf(
# 4076 "event.c" 3 4
stderr
# 4076 "event.c"
, "%s:%d: Assertion %s failed in %s", "event.c",4076,"count == base->event_count_active",__func__); abort(); } } while (0);
}
